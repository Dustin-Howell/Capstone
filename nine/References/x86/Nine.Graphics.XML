<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nine.Graphics</name>
    </assembly>
    <members>
        <member name="T:Nine.Animations.BoneAnimationReader">
            <summary>
            Content reader for <c>BoneAnimation</c>.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimationClipReader">
            <summary>
            Content reader for <c>BoneAnimationClip</c>.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimationControllerReader">
            <summary>
            Content reader for <c>BoneAnimationController</c>.
            </summary>
        </member>
        <member name="T:Nine.Animations.SpriteAnimationReader">
            <summary>
            Content reader for <c>SpriteAnimation</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.AmbientLightReader">
            <summary>
            Content reader for <c>AmbientLight</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.BirdEyeCameraReader">
            <summary>
            Content reader for <c>BirdEyeCamera</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.CameraReader">
            <summary>
            Content reader for <c>Camera</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Camera2DReader">
            <summary>
            Content reader for <c>Camera2D</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ChaseCameraReader">
            <summary>
            Content reader for <c>ChaseCamera</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.DecalReader">
            <summary>
            Content reader for <c>Decal</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.DirectionalLightReader">
            <summary>
            Content reader for <c>DirectionalLight</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.FogReader">
            <summary>
            Content reader for <c>Fog</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.FreeCameraReader">
            <summary>
            Content reader for <c>FreeCamera</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.FullScreenQuadReader">
            <summary>
            Content reader for <c>FullScreenQuad</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.GeometryReader">
            <summary>
            Content reader for <c>Geometry</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.HeightmapReader">
            <summary>
            Content reader for <c>Heightmap</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.InstancedModelReader">
            <summary>
            Content reader for <c>InstancedModel</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelReader">
            <summary>
            Content reader for <c>Model</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelAttachmentReader">
            <summary>
            Content reader for <c>ModelAttachment</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelCollisionReader">
            <summary>
            Content reader for <c>ModelCollision</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelMeshReader">
            <summary>
            Content reader for <c>ModelMesh</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelMeshPartTagReader">
            <summary>
            Content reader for <c>ModelMeshPartTag</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelSkeletonDataReader">
            <summary>
            Content reader for <c>ModelSkeletonData</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelTagReader">
            <summary>
            Content reader for <c>ModelTag</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelViewerCameraReader">
            <summary>
            Content reader for <c>ModelViewerCamera</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PointLightReader">
            <summary>
            Content reader for <c>PointLight</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ShadowMapReader">
            <summary>
            Content reader for <c>ShadowMap</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SkyBoxReader">
            <summary>
            Content reader for <c>SkyBox</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SpotLightReader">
            <summary>
            Content reader for <c>SpotLight</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SpriteReader">
            <summary>
            Content reader for <c>Sprite</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SurfaceReader">
            <summary>
            Content reader for <c>Surface</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextSpriteReader">
            <summary>
            Content reader for <c>TextSprite</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.AlphaTestMaterialReader">
            <summary>
            Content reader for <c>AlphaTestMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.BasicMaterialReader">
            <summary>
            Content reader for <c>BasicMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.BlurMaterialReader">
            <summary>
            Content reader for <c>BlurMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.CustomMaterialPartReader">
            <summary>
            Content reader for <c>CustomMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.DebugMaterialReader">
            <summary>
            Content reader for <c>DebugMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.DualTextureMaterialReader">
            <summary>
            Content reader for <c>DualTextureMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.EnvironmentMapMaterialReader">
            <summary>
            Content reader for <c>EnvironmentMapMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialLevelOfDetailReader">
            <summary>
            Content reader for <c>MaterialLevelOfDetail</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialPaintGroupReader">
            <summary>
            Content reader for <c>MaterialPaintGroup</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.SkinnedMaterialReader">
            <summary>
            Content reader for <c>SkinnedMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.AlphaTestMaterialPartReader">
            <summary>
            Content reader for <c>AlphaTestMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.BeginLightMaterialPartReader">
            <summary>
            Content reader for <c>BeginLightMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.BeginPaintGroupMaterialPartReader">
            <summary>
            Content reader for <c>BeginPaintGroupMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.ColorMatrixMaterialPartReader">
            <summary>
            Content reader for <c>ColorMatrixMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.DeferredLightsMaterialPartReader">
            <summary>
            Content reader for <c>DeferredLightsMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.DepthAndNormalMaterialPartReader">
            <summary>
            Content reader for <c>DepthAndNormalMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.DepthMaterialPartReader">
            <summary>
            Content reader for <c>DepthMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.DetailMaterialPartReader">
            <summary>
            Content reader for <c>DetailMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPartReader">
            <summary>
            Content reader for <c>DiffuseMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.DirectionalLightMaterialPartReader">
            <summary>
            Content reader for <c>DirectionalLightMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.DualTextureMaterialPartReader">
            <summary>
            Content reader for <c>DualTextureMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPartReader">
            <summary>
            Content reader for <c>EmissiveMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.EndLightMaterialPartReader">
            <summary>
            Content reader for <c>EndLightMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.EndPaintGroupMaterialPartReader">
            <summary>
            Content reader for <c>EndPaintGroupMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.FogMaterialPartReader">
            <summary>
            Content reader for <c>FogMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.InstancedMaterialPartReader">
            <summary>
            Content reader for <c>InstancedMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.NormalMapMaterialPartReader">
            <summary>
            Content reader for <c>NormalMapMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.ShadowMapMaterialPartReader">
            <summary>
            Content reader for <c>ShadowMapMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPartReader">
            <summary>
            Content reader for <c>SkinnedMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPartReader">
            <summary>
            Content reader for <c>SpecularMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.TangentTransformMaterialPartReader">
            <summary>
            Content reader for <c>TangentTransformMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.TextureTransformMaterialPartReader">
            <summary>
            Content reader for <c>TextureTransformMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.VertexTransformMaterialPartReader">
            <summary>
            Content reader for <c>VertexTransformMaterialPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.AbsorbControllerReader">
            <summary>
            Content reader for <c>AbsorbController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.BoxEmitterReader">
            <summary>
            Content reader for <c>BoxEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ColorControllerReader">
            <summary>
            Content reader for <c>ColorController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.CylinderEmitterReader">
            <summary>
            Content reader for <c>CylinderEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.FadeControllerReader">
            <summary>
            Content reader for <c>FadeController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ForceControllerReader">
            <summary>
            Content reader for <c>ForceController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.LineEmitterReader">
            <summary>
            Content reader for <c>LineEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleEffectReader">
            <summary>
            Content reader for <c>ParticleEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.PointEmitterReader">
            <summary>
            Content reader for <c>PointEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.RotationControllerReader">
            <summary>
            Content reader for <c>RotationController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SizeControllerReader">
            <summary>
            Content reader for <c>SizeController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SpeedControllerReader">
            <summary>
            Content reader for <c>SpeedController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SphereEmitterReader">
            <summary>
            Content reader for <c>SphereEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.TangentForceControllerReader">
            <summary>
            Content reader for <c>TangentForceController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.AdaptationEffectReader">
            <summary>
            Content reader for <c>AdaptationEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.AntiAliasEffectReader">
            <summary>
            Content reader for <c>AntiAliasEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.BloomEffectReader">
            <summary>
            Content reader for <c>BloomEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.BlurEffectReader">
            <summary>
            Content reader for <c>BlurEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.DepthOfFieldEffectReader">
            <summary>
            Content reader for <c>DepthOfFieldEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.HighDynamicRangeEffectReader">
            <summary>
            Content reader for <c>HighDynamicRangeEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.PostEffectReader">
            <summary>
            Content reader for <c>PostEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.PostEffectChainReader">
            <summary>
            Content reader for <c>PostEffectChain</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.PostEffectGroupReader">
            <summary>
            Content reader for <c>PostEffectGroup</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.BoxReader">
            <summary>
            Content reader for <c>Box</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.ConeReader">
            <summary>
            Content reader for <c>Cone</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.CrossReader">
            <summary>
            Content reader for <c>Cross</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.CylinderReader">
            <summary>
            Content reader for <c>Cylinder</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.DomeReader">
            <summary>
            Content reader for <c>Dome</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.DynamicPrimitiveReader">
            <summary>
            Content reader for <c>DynamicPrimitive</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.PlaneReader">
            <summary>
            Content reader for <c>Plane</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.SphereReader">
            <summary>
            Content reader for <c>Sphere</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.TeapotReader">
            <summary>
            Content reader for <c>Teapot</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.TorusReader">
            <summary>
            Content reader for <c>Torus</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.Material">
            <summary>
            Represents a local copy of settings of the specified effect.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.Material.sortOrderTypeMask">
            <summary>
            A mask that is applied to the sort order. 
            Materials with the same type always have the same sort order mask.
            This sort mask applies to the first 8 bits from most significant bits.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.Material.SortOrder">
            <summary>
            The order for material sorting.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.Material.materialUsages">
            <summary>
            Stores materials used for different purposes.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.Material"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.Find``1">
            <summary>
            Queries the material for the specified feature T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.FindAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Queries the material for all the components that implements interface T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.GetMaterialByUsage(Nine.Graphics.Materials.MaterialUsage)">
            <summary>
            Gets or sets the <see cref="T:Nine.Graphics.Materials.Material"/> with the specified usage.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.OnResolveMaterial(Nine.Graphics.Materials.MaterialUsage,Nine.Graphics.Materials.Material)">
            <summary>
            Gets the material with the specified usage that is attached to this material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.GetDependentPasses(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets the passes that are required by this material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.SetTexture(Nine.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets the texture based on the texture usage.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.BeginApply(Nine.Graphics.DrawingContext)">
            <summary>
            Applies all the shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.EndApply(Nine.Graphics.DrawingContext)">
            <summary>
            Restores any shader parameters changes after drawing the promitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.OnBeginApply(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Applies all the shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.OnEndApply(Nine.Graphics.DrawingContext)">
            <summary>
            Applies all the shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.ApplyLights(Nine.Graphics.DrawingContext,Microsoft.Xna.Framework.Graphics.IEffectLights)">
            <summary>
            Applies lights to the target effect from the drawing context.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.Material.ApplyFog(Nine.Graphics.DrawingContext,Microsoft.Xna.Framework.Graphics.IEffectFog)">
            <summary>
            Applies fog to the target effect from the drawing context.
            </summary>        
        </member>
        <member name="P:Nine.Graphics.Materials.Material.World">
            <summary>
            Gets or sets the world transformation for this material.
            The property provides a fast access to the world parameter without
            having to query for IEffectMatrices interface using the Find method.
            </summary>
            <remarks>
            Derived materials should support both this property and the
            IEffectMatrices interface.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Materials.Material.Texture">
            <summary>
            Gets or sets the default diffuse texture for this material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.Material.Alpha">
            <summary>
            Gets or sets the alpha value of this material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.Material.IsTransparent">
            <summary>
            Gets or sets whether this material is transparent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.Material.IsAdditive">
            <summary>
            Gets or sets whether this material will blend with other materials using additive blending.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.Material.TwoSided">
            <summary>
            Gets or sets a value indicating whether the underlying object rendered using
            this material is double sided when it is transparent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.Material.NextMaterial">
            <summary>
            Gets or sets the next material to form a multi pass material chain.
            </summary>
        </member>
        <member name="E:Nine.Graphics.Materials.Material.MaterialResolve">
            <summary>
            Occurs when a material usage is not found.
            </summary>
            <remarks>
            The first material represents the material to be resolved.
            The second material represents any existing material instance that are resolved.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.Materials.AdaptionMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.AdaptionMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.AntiAliasMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.AntiAliasMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.BloomMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.BloomMaterial"/> class.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.BlurMaterial">
            <summary>
            A post processing screen effect that blurs the whole screen.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.BlurMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.BlurMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.BlurMaterial.SetBlurEffectParameters(System.Single,System.Single)">
            <summary>
            Computes sample weightings and texture coordinate offsets
            for one pass of a separable Gaussian blur filter.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.BlurMaterial.ComputeGaussian(System.Single)">
            <summary>
            Evaluates a single point on the Gaussian falloff curve.
            Used for setting up the blur filter weightings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.BlurMaterial.UpdateSampleCount">
            <summary>
            Estimate the sample count for the given blur amount.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.BlurMaterial.BlurAmount">
            <summary>
            Gets or sets the amount of blurring.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.BlurMaterial.DepthBufferEnabled">
            <summary>
            Gets or sets a value indicating whether depth buffer will be sampled when blurring the scene.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.BlurMaterial.Direction">
            <summary>
            Gets or sets the direction of blurring in radians.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.ClearMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.ClearMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.DecalMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.DecalMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.DeferredDirectionalLightMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.DeferredDirectionalLightMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.DeferredPointLightMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.DeferredPointLightMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.DeferredSpotLightMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.DeferredSpotLightMaterial"/> class.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.DepthMaterial">
            <summary>
            Defines a material to show object depth.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.IEffectSkinned">
            <summary>
            Gets or sets skinning parameters for the current effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.IEffectSkinned.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Sets the bones transforms for the skinned effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.IEffectSkinned.SkinningEnabled">
            <summary>
            Gets or sets if vertex skinning is enabled by this effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.DepthMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.DepthMaterial"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.DepthMaterial.SkinningEnabled">
            <summary>
            Gets or sets if vertex skinning is enabled by this effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.DepthAndNormalMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.DepthAndNormalMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.DepthOfFieldMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.DepthOfFieldMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.LuminanceMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.LuminanceMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.RestoreDepthBufferMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.RestoreDepthBufferMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.ScaleMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.ScaleMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.SkyBoxMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.SkyBoxMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.SoftParticleMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.SoftParticleMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.ThickLineMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.ThickLineMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.ThresholdMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.ThresholdMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.ToneMappingMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.ToneMappingMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.VertexPassThrough2Material.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.VertexPassThrough2Material"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.VertexPassThrough3Material.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.VertexPassThrough3Material"/> class.
            </summary>
        </member>
        <member name="T:Nine.Animations.AvatarSkeleton">
            <summary>
            Defines the skeleton for avatar.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Skeleton">
            <summary>
            Represents a bone hierarchy that can be animated by <c>BoneAnimation</c>.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Skeleton.HasAnimated">
            <summary>
            Keep track of whether this skeleton has been animated.
            We don't perform blending when a skeleton has just been created.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetParentBone(System.Int32)">
            <summary>
            Gets the index of the parent bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetChildBones(System.Int32)">
            <summary>
            Gets all the child bones of the input bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetChildBones(System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Gets all the child bones of the input bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetBoneName(System.Int32)">
            <summary>
            Gets the name of the bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetBone(System.String)">
            <summary>
            Gets the index of the bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetAbsoluteBoneTransform(System.Int32)">
            <summary>
            Gets the aboslute transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetAbsoluteBoneTransform(System.String)">
            <summary>
            Gets the aboslute transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.CopyAbsoluteBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies the aboslute transforms of all the bones.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.CopyBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies the local transforms of all the bones.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetBoneTransform(System.Int32)">
            <summary>
            Gets the local transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetBoneTransform(System.String)">
            <summary>
            Gets the local transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetSkinTransforms">
            <summary>
            Skin the target model based on the current state of model bone transforms.
            </summary>
            <returns>
            A matrix array used to draw skinned meshes.
            </returns>
            <remarks>
            Whenever the bone or skeleton changes, you should re-skin the model.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetSkinTransforms(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Skin the target model based on the current state of model bone transforms.
            </summary>
            <param name="world">
            A world matrix that will be applied to the result bone transforms.
            </param>
            <returns>
            A matrix array used to draw skinned meshes.
            </returns>
            <remarks>
            Whenever the bone or skeleton changes, you should re-skin the model.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetSkinTransforms(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Skin the target model based on the current state of model bone transforms.
            </summary>
            <param name="skinTransforms">
            A matrix array to hold the result transformations.
            The length must be at least InverseBindPose.Count.
            </param>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetSkinTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Skin the target model based on the current state of model bone transforms.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.BoneTransforms">
            <summary>
            Gets a fixed sized array of transformation matrices for each bone
            according to its parent bone.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.ParentBones">
            <summary>
            Gets the hierarchical relationship between bones.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.BoneNames">
            <summary>
            Gets a collection of names for each bone.
            Return null if the skeleton does not have a name for each bone.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.SkeletonRoot">
            <summary>
            Gets the index of the root bone of the skeleton.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.InverseAbsoluteBindPose">
            <summary>
            Gets a collection of inverse transformation matrices for each bone
            according to the skeleton root bone.
            Return null if the skeleton is not intended for skinned models.
            </summary>
        </member>
        <member name="T:Nine.Animations.AvatarAnimationController">
            <summary>
            Defines a basic avatar animation controller from presets.
            </summary>
        </member>
        <member name="T:Nine.Animations.IBoneAnimationController">
            <summary>
            Represents a controller that manipulates the bone transforms of a model.
            </summary>
        </member>
        <member name="M:Nine.Animations.IBoneAnimationController.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="T:Nine.Animations.AvatarBoneAnimation">
            <summary>
            Provides methods and properties for animating an avatar using custom animations.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimation">
            <summary>
            Represents the animation of a skeleton that can be controlled by
            either the predefined animation clip or by custom controllers.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.#ctor(Nine.Graphics.Skeleton)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.#ctor(Nine.Graphics.Skeleton,Nine.Animations.BoneAnimationClip)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.#ctor(Nine.Graphics.Skeleton,Nine.Animations.IBoneAnimationController)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.OnStarted">
            <summary>
            Plays the animation from start.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.OnStopped">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.OnPaused">
            <summary>
            Pauses the animation.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.OnResumed">
            <summary>
            Resumes the animation.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.Update(System.Single)">
            <summary>
            Updates the internal state of the object based on game time.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.UpdateBoneTransforms(System.Single)">
            <summary>
            Updates the bone transforms.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.Skeleton">
            <summary>
            Gets the skeleton currently animated by this bone animation.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.Controllers">
            <summary>
            Gets all the controllers affecting this BoneAnimation.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.BlendEnabled">
            <summary>
            Gets or sets whether this BoneAnimation should blend with the
            previous bone poses (specified by BlendTarget) when started 
            playing the animation.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.BlendDuration">
            <summary>
            Gets or sets the duration of blend between this BoneAnimation
            and the previous animation specified by BlendTarget.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.KeyController">
            <summary>
            Gets or sets the key animation of this LayeredAnimation.
            A LayeredAnimation ends either when the last contained 
            animation stops or when the specifed KeyAnimation ends.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.IsSychronized">
            <summary>
            Gets or sets a value indicating whether all other animations
            should adjust the playing speed to sychronize the pace with 
            the KeyController if a valid one is specified.
            </summary>
        </member>
        <member name="F:Nine.Animations.AvatarBoneAnimation.currentPosition">
            <summary>
            The current temporal position in the animation.
            </summary>
        </member>
        <member name="P:Nine.Animations.AvatarBoneAnimation.Skeleton">
            <summary>
            Gets the skeleton of the avatar.
            </summary>
        </member>
        <member name="P:Nine.Animations.AvatarBoneAnimation.Microsoft#Xna#Framework#GamerServices#IAvatarAnimation#BoneTransforms">
            <summary>
            Gets the current position of the bones at the time specified by CurrentPosition.
            </summary>
        </member>
        <member name="P:Nine.Animations.AvatarBoneAnimation.CurrentPosition">
            <summary>
            The current temporal position in the animation.
            </summary>
        </member>
        <member name="T:Nine.Animations.WeightedBoneAnimationController">
            <summary>
            Represents a BoneAnimation that has a weight associated with each bone.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.#ctor(Nine.Graphics.Skeleton,Nine.Animations.IBoneAnimationController)">
            <summary>
            Creates a new instance of WeightedBoneAnimationController.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.EnableAll">
            <summary>
            Enables the animation on all bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.DisableAll">
            <summary>
            Disables the animation on all bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.Enable(System.Int32,System.Boolean)">
            <summary>
            Enables the animation on the target and its child bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.Enable(System.String,System.Boolean)">
            <summary>
            Enables the animation on the target and its child bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.Disable(System.Int32,System.Boolean)">
            <summary>
            Disables the animation on the target and its child bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.Disable(System.String,System.Boolean)">
            <summary>
            Disables the animation on the target and its child bones.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationController.Controller">
            <summary>
            Gets the inner controller used by this <c>WeightedBoneAnimationController</c>.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationController.BlendWeight">
            <summary>
            Gets or sets the weight applied to the final bone transform.
            This parameter has nothing to do with BlendEnabled and BlendDuration.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationController.BoneWeights">
            <summary>
            Gets the collection to manipulated the blend weights of each bone.
            </summary>
        </member>
        <member name="T:Nine.Animations.WeightedBoneAnimationControllerBone">
            <summary>
            Represents a bone that has a blend weight.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationControllerBone.BlendWeight">
            <summary>
            Gets or sets the blend weight of this bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationControllerBone.Enabled">
            <summary>
            Gets or sets wether this bone is enabled.
            </summary>
        </member>
        <member name="T:Nine.Animations.WeightedBoneAnimationControllerBoneCollection">
            <summary>
            Represents a collection of weighted bone for BoneAnimation.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimationControllerCollection">
            <summary>
            Represents a collection of controllers for BoneAnimation.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimationController">
            <summary>
            Controls the bone transforms of a model based on predefined skeleton animation tracks.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.#ctor(Nine.Animations.BoneAnimationClip)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimationController"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.#ctor(Nine.Animations.BoneAnimationClip,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimationController"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.Update(System.Single)">
            <summary>
            Update the animation by a specified amount of elapsed time.
            Handle playing either forwards or backwards.
            Determines whether animation should terminate or continue.
            Signals related events.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.OnSeek(System.Int32,System.Int32,System.Single)">
            <summary>
            Moves the animation at the position between start frame and end frame
            specified by percentage.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationController.InterpolationEnabled">
            <summary>
            Gets or sets whether this BoneAnimation should automatically
            perform matrix interpolation when the playing speed is less then 
            current frame rate.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationController.AnimationClip">
            <summary>
            Gets the animation clip used by this bone animation.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneSnapshotController">
            <summary>
            Provides a snapshot of the original bone transforms of a model.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneSnapshotController.#ctor(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneSnapshotController"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneSnapshotController.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimationClip">
            <summary>
            Defines a bone animation clip.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationClip.FramesPerSecond">
            <summary>
            Gets animation frame rate.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationClip.TotalFrames">
            <summary>
            Gets total number of frames.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationClip.PreferredEnding">
            <summary>
            Gets the preferred ending style.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationClip.Transforms">
            <summary>
            Gets all the channels in this animation clip.
            The transform is ordered by bone index then ordered by frame number.
            </summary>
        </member>
        <member name="T:Nine.Animations.LookAtController">
            <summary>
            Controls the target bone to make it always look at the specified target.
            </summary>
        </member>
        <member name="M:Nine.Animations.LookAtController.#ctor(Nine.Graphics.Skeleton,Microsoft.Xna.Framework.Matrix,System.Int32)">
            <summary>
            Creates a new LookAtController.
            </summary>
        </member>
        <member name="M:Nine.Animations.LookAtController.Update(System.Single)">
            <summary>
            Updates the internal state of the object based on game time.
            </summary>
        </member>
        <member name="M:Nine.Animations.LookAtController.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Bone">
            <summary>
            Gets or sets the index of the controlled bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Target">
            <summary>
            Gets or sets the target to look at.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Up">
            <summary>
            Gets or sets the up axis.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Forward">
            <summary>
            Gets or sets the forward axis.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Transform">
            <summary>
            Gets or sets the base world transform of the parent BoneAnimation.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.HorizontalRotation">
            <summary>
            Gets or sets the range of horizontal rotation of the controlled bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.VerticalRotation">
            <summary>
            Gets or sets the range of vertical rotation of the controlled bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.RotationSpeed">
            <summary>
            Gets or sets the max rotation speed.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Skeleton">
            <summary>
            Gets the parent animation that this controller is affecting.
            </summary>
        </member>
        <member name="T:Nine.Animations.SpriteAnimation">
            <summary>
            An animation player that plays TextureList based sprite animations.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.SpriteAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.#ctor(Nine.Graphics.TextureAtlas)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.SpriteAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.#ctor(Nine.Graphics.TextureAtlas,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.SpriteAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.OnSeek(System.Int32,System.Int32,System.Single)">
            <summary>
            Moves the animation at the position between start frame and end frame
            specified by percentage.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.Source">
            <summary>
            Gets or sets the texture list used by this <see cref="T:Nine.Animations.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.Texture">
            <summary>
            Gets the texture for this <see cref="T:Nine.Animations.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.SourceRectangle">
            <summary>
            Gets the current source rectangle.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.Target">
            <summary>
            Gets or sets the target that this sprite animation should affect.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.TargetProperty">
            <summary>
            Gets or sets the target property that this sprite animation should affect.
            The property must be of type <see cref="T:Nine.Graphics.TextureAtlasFrame"/>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ChaseCamera">
            <summary>
            Represents a simple chase camera with spring physics.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Camera">
            <summary>
            Defines a camera that can be attacked to a <see cref="T:Nine.Transformable"/>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ICamera">
            <summary>
            Interface for game cameras.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ICamera.TryGetViewFrustum(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets the view, projection matrix of this camera.
            </summary>
            <returns>
            Returns a value indicating whether the content this camera will be
            rendered onto the screen.
            </returns>
        </member>
        <member name="T:Nine.Graphics.IGraphicsObject">
            <summary>
            Defines an interface for objects that can be added to or removed 
            from a drawing context.
            </summary>
        </member>
        <member name="M:Nine.Graphics.IGraphicsObject.OnAdded(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is added to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.IGraphicsObject.OnRemoved(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is removed from the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Camera.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Camera.UpdateProjectionMatrix">
            <summary>
            Performs update of ProjectionMatrix.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Camera.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Camera"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Camera.View">
            <summary>
            Gets the camera view matrix
            </summary>
        </member>
        <member name="P:Nine.Graphics.Camera.NearPlane">
            <summary>
            Gets or sets the distance to the camera near clip plane.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Camera.FarPlane">
            <summary>
            Gets or sets the distance to the camera far clip plane.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Camera.AspectRatio">
            <summary>
            Gets or sets camera aspect ratio.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Camera.FieldOfView">
            <summary>
            Gets or sets camera field of view in radians.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Camera.Projection">
            <summary>
            Gets the camera projection matrix
            </summary>
        </member>
        <member name="P:Nine.Graphics.Camera.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ChaseCamera.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ChaseCamera"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ChaseCamera.UpdatePositions(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the desired camera position.
            </summary>
            <returns>
            Returns whether the camera should be reset at the desired position.
            </returns>
        </member>
        <member name="M:Nine.Graphics.ChaseCamera.UpdateMatrices">
            <summary>
            Rebuilds camera's view and projection matrices.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ChaseCamera.Reset">
            <summary>
            Forces camera to be at desired position and to stop moving. The is useful
            when the chased object is first created or after it has been teleported.
            Failing to call this after a large change to the chased object's position
            will result in the camera quickly flying across the world.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ChaseCamera.Update(System.Single)">
            <summary>
            Animates the camera from its current position towards the desired offset
            behind the chased object. The camera's animation is controlled by a simple
            physical spring attached to the camera and anchored to the desired position.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.Target">
            <summary>
            Position of object being chased.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.Surface">
            <summary>
            Gets or sets the collision surface that this chase camera will try to avoid.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.SurfaceOffset">
            <summary>
            Gets or sets the minimum height above the collision surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.PositionOffset">
            <summary>
            Desired camera position in the chased object's coordinate system.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.LookAtOffset">
            <summary>
            Look at point in the chased object's coordinate system.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.Stiffness">
            <summary>
            Physics coefficient which controls the influence of the camera's position
            over the spring force. The stiffer the spring, the closer it will stay to
            the chased object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.Damping">
            <summary>
            Physics coefficient which approximates internal friction of the spring.
            Sufficient damping will prevent the spring from oscillating infinitely.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.Mass">
            <summary>
            Mass of the camera body. Heaver objects require stiffer springs with less
            damping to move at the same rate as lighter objects.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.Position">
            <summary>
            Position of camera in world space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ChaseCamera.Velocity">
            <summary>
            Velocity of camera.
            </summary>
        </member>
        <member name="T:Nine.Components.FrameRate">
            <summary>
            Frame rate profiler
            </summary>
        </member>
        <member name="M:Nine.Components.FrameRate.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            The main constructor for the class.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:Nine.Components.FrameRate"/> is visible.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.UpdateFrequency">
            <summary>
            Time needed to calculate FPS.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Font">
            <summary>
            Gets or sets the sprite font used to draw FPS string
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Color">
            <summary>
            Gets or sets the color used to draw FPS string
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Position">
            <summary>
            Gets or set the frame rate position on the screen
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.CurrentFrame">
            <summary>
            Gets the total number of frames since profiler started
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.OverallFramesPerSecond">
            <summary>
            Gets the average frame rate up until now
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.FramesPerSecond">
            <summary>
            Gets the current Frame Per Second for the game
            </summary>
        </member>
        <member name="T:Nine.Components.GameConsoleEventArgs">
            <summary>
            Event args used by GameConsole.
            </summary>
        </member>
        <member name="T:Nine.Components.GameConsole">
            <summary>
            In game console
            </summary>
        </member>
        <member name="P:Nine.Components.GameConsole.Text">
            <summary>
            Gets or sets current console text
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextSprite">
            <summary>
            Defines a 2D text sprite.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ISprite">
            <summary>
            Defines an 2D drawable object
            </summary>
        </member>
        <member name="M:Nine.Graphics.ISprite.Draw(Nine.Graphics.DrawingContext,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws this sprite using sprite batch.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ISprite.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this sprite using the specified material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ISprite.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ISprite.Material">
            <summary>
            Gets the material of the object.
            A value of null indicates the object does not have any user specific
            material settings, and should be drawn using the default method.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ISprite.ZOrder">
            <summary>
            Gets the z order of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ISprite.BlendState">
            <summary>
            Gets the blend state of this sprite.
            A return value of null indicates that this sprite will use BlendState.AlphaBlend.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ISprite.SamplerState">
            <summary>
            Gets the sampler state of this sprite.
            A return value of null indicates that this sprite will use SamplerState.LinearClamp.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextSprite.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of TextSprite.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextSprite.Draw(Nine.Graphics.DrawingContext,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws this sprite using the specified sprite batch.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextSprite.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.GraphicsDevice">
            <summary>
            Gets the underlying graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Visible">
            <summary>
            Gets or sets whether this sprite is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Text">
            <summary>
            Gets or sets the text for this text sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Alpha">
            <summary>
            Gets or sets the alpha of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Color">
            <summary>
            Gets or sets the color of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.BlendState">
            <summary>
            Gets or sets the blend state of this sprite. The default value is BlendState.AlphaBlend.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.ZOrder">
            <summary>
            Gets or sets the z order of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Font">
            <summary>
            Gets or sets the texture of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.FlipX">
            <summary>
            Gets or sets a value indicating whether this sprite
            will be flipped on the x axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.FlipY">
            <summary>
            Gets or sets a value indicating whether this sprite
            will be flipped on the x axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Position">
            <summary>
            Gets or sets the position of this sprite in screen space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Scale">
            <summary>
            Gets or sets the scale of this sprite in screen space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Rotation">
            <summary>
            Gets or sets the rotation of this sprite in screen space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Size">
            <summary>
            Gets or sets the optional target size of this sprite in screen space independent of the scale factor.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextSprite.Anchor">
            <summary>
            Gets or sets the percentage based anchor point of this sprite.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.SpritePass">
            <summary>
            Defines a pass that draws all the 2D sprites.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.Pass">
            <summary>
            A drawing pass represents a single pass in the composition chain.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Drawing.Pass.Id">
            <summary>
            Id for this pass, used for dependency sorting.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Drawing.Pass.Container">
            <summary>
            Keeps track of the parent container.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Drawing.Pass.DependentPasses">
            <summary>
            Each drawing pass can have several dependent passes. All dependent 
            passes are drawn before this passes draws.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.Pass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Drawing.Pass"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.Pass.AddDependency(Nine.Graphics.Drawing.Pass)">
            <summary>
            Indicats this pass with be executed after the specified pass has been executed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.Pass.TryGetViewFrustum(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets the view and projection matrices contains the objects to be rendered in this pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.Pass.GetDependentPasses(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets all the pass types that are required by this pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.Pass.GetActivePasses(System.Collections.Generic.IList{Nine.Graphics.Drawing.Pass})">
            <summary>
            Gets all the passes that are going to be rendered.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.Pass.PrepareRenderTarget(Nine.Graphics.DrawingContext,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Graphics.SurfaceFormat})">
            <summary>
            Prepares a render target to hold the result of this pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.Pass.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
            <param name="drawables">
            A list of drawables about to be drawed in this drawing pass.
            </param>
        </member>
        <member name="P:Nine.Graphics.Drawing.Pass.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.Drawing.Pass"/> is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.Pass.Order">
            <summary>
            Gets or sets the preferred drawing order of this drawing pass.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelAttachment">
            <summary>
            Defines an object that can be bound to a specific bone of a model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelAttachment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ModelAttachment"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelAttachment.#ctor(Nine.Transformable)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ModelAttachment"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelAttachment.Transformable">
            <summary>
            Gets or sets the transformable object that is bound to the model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelAttachment.Bone">
            <summary>
            Gets or sets the bone name of the target model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelAttachment.Transform">
            <summary>
            Gets or sets the bias transformation matrix for the binding.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelAttachment.UseBoneScale">
            <summary>
            Gets or sets a value indicating whether source object is scaled 
            according to the target bone.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelAttachment.ShareSkeleton">
            <summary>
            Gets or sets a value indicating whether the source model will 
            use the target skeleton.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelAttachmentCollection">
            <summary>
            Defines an object that is attached to the specific bone of a model.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Sprite">
            <summary>
            Defines a 2D textured sprite.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Sprite.vertexBuffer">
            <summary>
            The vertex buffer and index buffers are shared between sprites.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of Sprite.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Sprite.Update(System.Single)">
            <summary>
            Updates the animations of this sprite.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Sprite.GetBuffers(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer@,Microsoft.Xna.Framework.Graphics.IndexBuffer@)">
            <summary>
            Gets the vertex and index buffer for drawing sprites.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Sprite.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this sprite with the specified material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Sprite.Draw(Nine.Graphics.DrawingContext,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws this sprite using the specified sprite batch.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Sprite.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.GraphicsDevice">
            <summary>
            Gets the underlying graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Visible">
            <summary>
            Gets or sets whether this sprite is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Material">
            <summary>
            Gets or sets the material of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Alpha">
            <summary>
            Gets or sets the alpha of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Color">
            <summary>
            Gets or sets the color of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.BlendState">
            <summary>
            Gets or sets the blend state of this sprite. The default value is BlendState.AlphaBlend.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.SamplerState">
            <summary>
            Gets or sets the sampler state of this sprite. The default value is SamplerState.LinearClamp.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.FlipX">
            <summary>
            Gets or sets a value indicating whether this sprite
            will be flipped on the x axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.FlipY">
            <summary>
            Gets or sets a value indicating whether this sprite
            will be flipped on the x axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.ZOrder">
            <summary>
            Gets or sets the z order of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Animations">
            <summary>
            Gets the animations of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Position">
            <summary>
            Gets or sets the position of this sprite in local space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Scale">
            <summary>
            Gets or sets the scale of this sprite in local space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Rotation">
            <summary>
            Gets or sets the rotation of this sprite in local space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Size">
            <summary>
            Gets or sets the optional target size of this sprite in screen space independent of the scale factor.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Anchor">
            <summary>
            Gets or sets the percentage based anchor point of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.Texture">
            <summary>
            Gets or sets the texture of this sprite.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Sprite.SourceRectangle">
            <summary>
            Gets or sets the rectangular region in the source texture.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SceneExtensions">
            <summary>
            Contains extension methods related to graphics.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.GetGraphicsDevice(Nine.Group)">
            <summary>
            Gets the graphics device associated with the target group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.GetContentManager(Nine.Group)">
            <summary>
            Gets the content manager associated with the target group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.GetDrawingContextInternal(Nine.Scene)">
            <summary>
            Gets the drawing context of the specified scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.GetDrawingContext(Nine.Scene)">
            <summary>
            Gets the drawing context of the specified scene.
            Creates a default drawing context if no drawing context is currently bound
            to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.GetDrawingContext(Nine.Scene,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Gets the drawing context of the specified scene. 
            Creates a default drawing context if no drawing context is currently bound
            to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.SetDrawingContext(Nine.Scene,Nine.Graphics.DrawingContext)">
            <summary>
            Sets the drawing context of the specified scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.Draw(Nine.Scene,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single)">
            <summary>
            Draws the specified scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.DrawDiagnostics(Nine.Scene,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single)">
            <summary>
            Draws diagnostic information of the target scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SceneExtensions.BindDrawingContext(Nine.Scene,Nine.Graphics.DrawingContext)">
            <summary>
            Binds scene added/removed events to the drawing context.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.DepthPrePass">
            <summary>
            Defines a pass that draws the scene depth buffer prior to the actual rendering.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.DepthPrePass.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.IDeferredLight">
            <summary>
            Defines a light used by deferred rendering.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.IDeferredLight.PrepareLightGeometry(Nine.Graphics.DrawingContext)">
            <summary>
            Gets the drawable object that is used to generate the light buffer.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.LightPrePass">
            <summary>
            Represents a deferred lighting technique.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.LightPrePass.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Drawing.LightPrePass"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.LightPrePass.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.LightPrePass.Begin(Nine.Graphics.DrawingContext)">
            <summary>
            Begins the rendering of the scene using DepthNormalEffect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.LightPrePass.End(Nine.Graphics.DrawingContext)">
            <summary>
            Ends the rendering of the scene and generates DepthNormalMap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.LightPrePass.BeginLights(Nine.Graphics.DrawingContext)">
            <summary>
            Begins the rendering of all the lights in the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.LightPrePass.DrawLight(Nine.Graphics.DrawingContext,Nine.Graphics.Drawing.IDeferredLight)">
            <summary>
            Draws a light instance for DeferredEffect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.LightPrePass.EndLights(Nine.Graphics.DrawingContext)">
            <summary>
            Ends the rendering of lights and generates LightTexture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.LightPrePass.GraphicsDevice">
            <summary>
            Gets the graphics device used by this effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.LightPrePass.NormalBuffer">
            <summary>
            Gets the texture that contains world space normal info of the scene.
            </summary>
            <remarks>
            World space normal info is stored in the RGB channel of the texture.
            Specular power is stored in the A channel of the texture.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Drawing.LightPrePass.DepthBuffer">
            <summary>
            Gets the texture that contains depth info of the scene.
            </summary>
            <remarks>
            Depth info is stored in the R channel of the texture.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Drawing.LightPrePass.LightBuffer">
            <summary>
            Gets the texture that contains lighting info of the scene.
            </summary>
            <remarks>
            Light color is stored in the RGB channel of the texture.
            Light specular multiplier is stored in the Alpha channel of the texture.
            Light specular color is ignored.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Drawing.LightPrePass.NormalBufferFormat">
            <summary>
            Gets or sets the preferred surface format for graphics buffer.
            The default value is SurfaceFormat.Color.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.LightPrePass.DepthBufferFormat">
            <summary>
            Gets or sets the preferred surface format for graphics buffer.
            The default value is SurfaceFormat.Single.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.LightPrePass.LightBufferFormat">
            <summary>
            Gets or sets the preferred surface format for light buffer.
            The default value is SurfaceFormat.Color.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.PassGroup">
            <summary>
            Enables a group of drawing passes to be rendered one by one.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.PassGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Drawing.PassGroup"/> class.
            </summary>
            <param name="graphics"></param>
        </member>
        <member name="M:Nine.Graphics.Drawing.PassGroup.GetActivePasses(System.Collections.Generic.IList{Nine.Graphics.Drawing.Pass})">
            <summary>
            Gets all the passes that are going to be rendered.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.PassGroup.PrepareRenderTarget(Nine.Graphics.DrawingContext,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Graphics.SurfaceFormat})">
            <summary>
            Prepares a render target to hold the result of this pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.PassGroup.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.PassGroup.Passes">
            <summary>
            Gets the child passes of this drawing pass.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureCollection">
            <summary>
            Contains commonly used textures in a drawing context.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureCollection.MaxTextureSlots">
            <summary>
            Gets a value indicating the maximum number of textures supported.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.TextureCollection"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextureCollection.Item(Nine.Graphics.TextureUsage)">
            <summary>
            Gets or sets the global texture with the specified texture usage.
            </summary>
        </member>
        <member name="T:Nine.Graphics.MatrixCollection">
            <summary>
            Contains commonly used matrices in a drawing context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.View">
            <summary>
            Gets the view matrix for this drawing operation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.Projection">
            <summary>
            Gets the projection matrix for this drawing operation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ViewProjection">
            <summary>
            Gets the view projection matrix.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ViewProjectionInverse">
            <summary>
            Gets the view projection inverse matrix.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ViewInverse">
            <summary>
            Gets the inverse view matrix.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ViewTranspose">
            <summary>
            Gets the transposed view matrix.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ViewInverseTranspose">
            <summary>
            Gets the inverse transpose view matrix.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ProjectionInverse">
            <summary>
            Gets the inverse Projection matrix.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ProjectionTranspose">
            <summary>
            Gets the transposed Projection matrix.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ProjectionInverseTranspose">
            <summary>
            Gets the inverse transpose Projection matrix.
            </summary>
        </member>
        <member name="P:Nine.Graphics.MatrixCollection.ViewFrustum">
            <summary>
            Gets the view frustum for this drawing operation.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.DrawingQueue">
            <summary>
            Each item in the queue will hold a strong reference to the IDrawableObject.
            By using a circular queue, chances are that any unused old references will be
            replaced by newly added objects as long as the render loop goes on.
            </summary>
        </member>
        <member name="T:Nine.Graphics.GraphicsDeviceService">
            <summary>
            Helper class responsible for creating and managing the GraphicsDevice.
            All GraphicsDeviceControl instances share the same GraphicsDeviceService,
            so even though there can be many controls, there will only ever be a single
            underlying GraphicsDevice. This implements the standard IGraphicsDeviceService
            interface, which provides notification events for when the device is reset
            or disposed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsDeviceService.#ctor(System.IntPtr,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
            <summary>
            Constructor is private, because this is a singleton class:
            client controls should use the public AddRef method instead.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsDeviceService.AddRef">
            <summary>
            Gets a reference to the singleton instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsDeviceService.AddRef(System.Int32,System.Int32)">
            <summary>
            Gets a reference to the singleton instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsDeviceService.AddRef(System.IntPtr,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
            <summary>
            Gets a reference to the singleton instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsDeviceService.Release(System.Boolean)">
            <summary>
            Releases a reference to the singleton instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsDeviceService.ResetDevice(System.Int32,System.Int32)">
            <summary>
            Resets the graphics device to whichever is bigger out of the specified
            resolution or its current size. This behavior means the device will
            demand-grow to the largest of all its GraphicsDeviceControl clients.
            </summary>
        </member>
        <member name="P:Nine.Graphics.GraphicsDeviceService.GraphicsDevice">
            <summary>
            Gets the current graphics device.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialPart">
            <summary>
            Represents a basic building block of a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.OnBind">
            <summary>
            Called when this material part is bound to a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.GetShaderCode(Nine.Graphics.Materials.MaterialUsage)">
            <summary>
            Gets the shader code for this material part based on material usage.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.GetDependentParts(Nine.Graphics.Materials.MaterialUsage,System.Collections.Generic.IList{System.Type})">
            <summary>
            Puts the dependent parts into the result list.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.GetDependentPasses(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Puts the dependent textures into the result list.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.SetTexture(Nine.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets the texture based on the texture usage.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.ApplyGlobalParameters(Nine.Graphics.DrawingContext)">
            <summary>
            Applies all the global shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.BeginApplyLocalParameters(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Applies all the local shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.EndApplyLocalParameters(Nine.Graphics.DrawingContext)">
            <summary>
            Restores any local shader parameters changes after drawing the promitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.OnResolveMaterialPart(Nine.Graphics.Materials.MaterialUsage,Nine.Graphics.Materials.MaterialPart)">
            <summary>
            Gets the material with the specified usage that is attached to this material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.NotifyShaderChanged">
            <summary>
            Notifies the material system that the shader has changed and needs recompile.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.Clone">
            <summary>
            Copies data from an existing object to this object. 
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.GetParameter(System.String)">
            <summary>
            Gets the EffectParameter with the name from the fragment parameter name.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.GetTextureParameter(System.String,Microsoft.Xna.Framework.Graphics.EffectParameter@,System.Int32@)">
            <summary>
            Gets the index of the sampler with the name from the fragment parameter name.
            </summary>
            <returns>
            The index of the sampler, or a negative value if the parameter is not found.
            </returns>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.GetParameterBySemantic(System.String)">
            <summary>
            Gets the EffectParameter by semantic from the fragment parameter name.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPart.GetShaderCode(System.String)">
            <summary>
            Gets the shader coder from the content pipeline assembly.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialPart.MaterialGroup">
            <summary>
            Gets the EffectParts from the parent LinkedEffectContent.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ShadowMap">
            <summary>
            Represents a shadow drawing technique using shadow map.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ShadowMap.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ShadowMap"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ShadowMap.GetActivePasses(System.Collections.Generic.IList{Nine.Graphics.Drawing.Pass})">
            <summary>
            Gets all the passes that are going to be rendered.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ShadowMap.Begin">
            <summary>
            Begins the shadowmap generation process and clears the shadowmap to white.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ShadowMap.End(Nine.Graphics.DrawingContext)">
            <summary>
            Ends the shadowmap generation process and returns the result shadowmap texture.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ShadowMap.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ShadowMap.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ShadowMap.Light">
            <summary>
            Gets the parent light that uses this shadow map.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ShadowMap.Size">
            <summary>
            Gets or sets the size of the shadow map texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ShadowMap.SurfaceFormat">
            <summary>
            Gets or sets the preferred surface format of the shadow map texture.
            The default value is SurfaceFormat.Single.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ShadowMap.Texture">
            <summary>
            Gets the underlying shadow map texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ShadowMap.BlurEnabled">
            <summary>
            Gets whether a blurring pass is applied to the final shadow map.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ShadowMap.BlurAmount">
            <summary>
            Gets or sets the blur amount.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.AdaptationEffect">
            <summary>
            Defines a post processing effect that adapts to scene changes.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.PostEffect">
            <summary>
            Represents a post processing effect.
            </summary>
        </member>
        <member name="T:Nine.Graphics.IPostEffect">
            <summary>
            Defines an interface for post processing effect
            </summary>
        </member>
        <member name="P:Nine.Graphics.IPostEffect.InputTexture">
            <summary>
            Gets or sets the input texture to be processed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IPostEffect.InputFormat">
            <summary>
            Gets the preferred surface format for the input texture.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffect.#ctor">
            <summary>
            Creates a new instance of PostEffect for post processing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffect.#ctor(Nine.Graphics.Materials.Material)">
            <summary>
            Creates a new instance of PostEffect for post processing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffect.GetDependentPasses(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets all the pass types that are required by this pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffect.GetActivePasses(System.Collections.Generic.IList{Nine.Graphics.Drawing.Pass})">
            <summary>
            Gets all the passes that are going to be rendered.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffect.PrepareRenderTarget(Nine.Graphics.DrawingContext,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Graphics.SurfaceFormat})">
            <summary>
            Prepares a render target to hold the result of this pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffect.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffect.Nine#Graphics#IGraphicsObject#OnAdded(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is added to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffect.Nine#Graphics#IGraphicsObject#OnRemoved(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is removed from the scene.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffect.Material">
            <summary>
            Gets or sets the material used by this post effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffect.InputTexture">
            <summary>
            Gets or sets the input texture to be processed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffect.InputFormat">
            <summary>
            Gets the preferred surface format for the input texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffect.SurfaceFormat">
            <summary>
            Gets or sets the surface format of the render target.
            Specify null to use the surface format of the current backbuffer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffect.RenderTargetSize">
            <summary>
            Gets or sets the render target size.
            Specify null to use current viewport size.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffect.RenderTargetScale">
            <summary>
            Gets or sets the render target scale. This value is multiplied by
            <c>RenderTargetSize</c> to determine the final size of the render target.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.AdaptationEffect.#ctor">
            <summary>
            Creates a new instance of <c>AdaptationEffect</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.AdaptationEffect.Speed">
            <summary>
            Get or sets the speed of the adaptation.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.BlurEffect">
            <summary>
            Represents a blur post processing effect.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.PostEffectChain">
            <summary>
            Represents post processing effects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectChain.#ctor">
            <summary>
            Creates a new instance of ScreenEffect for post processing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectChain.#ctor(Microsoft.Xna.Framework.Graphics.BlendState,Nine.Graphics.Drawing.Pass[])">
            <summary>
            Creates a new instance of ScreenEffect for post processing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectChain.#ctor(Nine.Graphics.TextureUsage,Nine.Graphics.Drawing.Pass[])">
            <summary>
            Creates a new instance of ScreenEffect for post processing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectChain.GetDependentPasses(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets all the pass types that are required by this pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectChain.GetActivePasses(System.Collections.Generic.IList{Nine.Graphics.Drawing.Pass})">
            <summary>
            Gets all the passes that are going to be rendered.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectChain.Nine#Graphics#IGraphicsObject#OnAdded(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is added to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectChain.Nine#Graphics#IGraphicsObject#OnRemoved(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is removed from the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectChain.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffectChain.Effects">
            <summary>
            Gets a list of post processing effects contained by this chain.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffectChain.TextureUsage">
            <summary>
            Gets or sets the texture usage of the result of this chain.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffectChain.BlendState">
            <summary>
            Gets or sets the state of the blend of this post effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.BlurEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.PostEffects.BlurEffect"/> class.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.AntiAliasEffect">
            <summary>
            Represents a antialias post processing effect using Fast Approximate AntiAliasing (FXAA).
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.LuminanceChain">
            <summary>
            Represents luminance chain used in high dynamic range (HDR) post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.LuminanceChain.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.PostEffects.LuminanceChain"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.LuminanceChain.AdaptationEnabled">
            <summary>
            Gets or sets whether eye adaptation is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.LuminanceChain.AdaptationSpeed">
            <summary>
            Gets or sets the speed that determine how fast the eye adapts to the changes
            of the luminance in the scene.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialPaintGroup">
            <summary>
            Defines a material part that is a layer of a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.MaterialPaintGroup"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.OnBind">
            <summary>
            Called when this material part is bound to a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.GetDependentParts(Nine.Graphics.Materials.MaterialUsage,System.Collections.Generic.IList{System.Type})">
            <summary>
            Puts the dependent parts into the result list.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.ApplyGlobalParameters(Nine.Graphics.DrawingContext)">
            <summary>
            Applies all the global shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.BeginApplyLocalParameters(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Applies all the local shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.EndApplyLocalParameters(Nine.Graphics.DrawingContext)">
            <summary>
            Restores any local shader parameters changes after drawing the promitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.OnResolveMaterialPart(Nine.Graphics.Materials.MaterialUsage,Nine.Graphics.Materials.MaterialPart)">
            <summary>
            Gets the material with the specified usage that is attached to this material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.SetTexture(Nine.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets the texture based on the texture usage.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.GetShaderCode(Nine.Graphics.Materials.MaterialUsage)">
            <summary>
            Gets the shader code for this material part based on material usage.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.Clone">
            <summary>
            Copies data from an existing object to this object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.GetMaskTextureScale(Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Gets the mask texture scale of the material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.SetMaskTextureScale(Nine.Graphics.Materials.MaterialGroup,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the mask texture scale of the material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.GetMaskTextures(Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Gets a list of mask textures of the material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialPaintGroup.SetMaskTextures(Nine.Graphics.Materials.MaterialGroup,System.Collections.IList)">
            <summary>
            Sets the mask textures of the material group.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialPaintGroup.MaterialParts">
            <summary>
            Gets a collection containing all the material parts use by this paint group.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.CustomMaterialParameterCollection">
            <summary>
            Defines a collection of parameters used by custom materials.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.CustomMaterialParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialParameterCollection.Bind(Nine.Graphics.Materials.IEffectParameterProvider)">
            <summary>
            Binds all the parameters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterialParameterCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterialParameterCollection.Item(System.String)">
            <summary>
            Gets or sets the value of a parameter with the specified name.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.CustomEffectSemantics">
            <summary>
            Defines a list of effect parameter annotation supported by the rendering system.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.CustomEffectParameterBinding.Bindings">
            <summary>
            This array has to be sychronized with CustomEffectSemantics
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.CustomMaterialPart">
            <summary>
            Represents a basic building block of a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialPart.OnBind">
            <summary>
            Called when this material part is bound to a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialPart.ApplyGlobalParameters(Nine.Graphics.DrawingContext)">
            <summary>
            Applies all the global shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialPart.BeginApplyLocalParameters(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Applies all the local shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialPart.EndApplyLocalParameters(Nine.Graphics.DrawingContext)">
            <summary>
            Restores any local shader parameters changes after drawing the promitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialPart.GetShaderCode(Nine.Graphics.Materials.MaterialUsage)">
            <summary>
            Gets the shader code for this material part based on material usage.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterialPart.Clone">
            <summary>
            Copies data from an existing object to this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterialPart.ShaderUsages">
            <summary>
            Gets or sets the usages of the default shader code.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterialPart.ShaderCode">
            <summary>
            Gets or sets the shader code when material usage is default.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterialPart.ShaderCodes">
            <summary>
            Gets a dictionary containing all the HLSL shader code with different material usage.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterialPart.Parameters">
            <summary>
            Gets the parameters unique to this custom material instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialLevelOfDetail">
            <summary>
            Defines a list of materials that are sorted from lowest quality to highest quality.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialLevelOfDetail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.MaterialLevelOfDetail"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialLevelOfDetail.#ctor(System.Collections.Generic.IEnumerable{Nine.Graphics.Materials.Material})">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.MaterialLevelOfDetail"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialLevelOfDetail.UpdateLevelOfDetail(System.Single)">
            <summary>
            Manually updates the current selected material based on level of detail settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialLevelOfDetail.MaterialLevels">
            <summary>
            Gets a collection containing all the material levels.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialLevelOfDetail.Current">
            <summary>
            Gets the current material level.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialLevelOfDetail.LevelOfDetailStart">
            <summary>
            Gets or sets the distance at which to use the highest quality material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialLevelOfDetail.LevelOfDetailEnd">
            <summary>
            Gets or sets the distance at which to use the lowest quality material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialLevelOfDetail.MaterialQuality">
            <summary>
            Gets or sets the overall material quality that is multiplied with the quality
            determined by LevelOfDetailStart and LevelOfDetailEnd.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialLevelOfDetail.Count">
            <summary>
            Gets the count of material levels.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.InstancedMaterialPart">
            <summary>
            Defines a material part that is used for hardware instancing.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialUsage">
            <summary>
            Defines commonly used material usages.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.MaterialUsage.Default">
            <summary>
            Default material usage.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.MaterialUsage.ShadowMap">
            <summary>
            The material is used to generate a shadowmap.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.MaterialUsage.Depth">
            <summary>
            The material is used to generate a depth map.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.MaterialUsage.Normal">
            <summary>
            The material is used to generate a normal map.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.MaterialUsage.DepthAndNormal">
            <summary>
            The material is used to generate the graphics buffer used in deferred lighting.
            </summary>
        </member>
        <member name="T:Nine.Graphics.IDrawableObject">
            <summary>
            Represents a drawable object that can be rendered using the renderer.
            </summary>
        </member>
        <member name="M:Nine.Graphics.IDrawableObject.GetDistanceToCamera(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the distance from the position of the object to the current camera.
            </summary>
        </member>
        <member name="M:Nine.Graphics.IDrawableObject.OnAddedToView(Nine.Graphics.DrawingContext)">
            <summary>
            Called before the draw method whenever the view frustum has changed.
            </summary>
            <returns>
            Returns a value indicating whether this drawable object is visible and should
            be rendered from this view perspective.
            </returns>
        </member>
        <member name="M:Nine.Graphics.IDrawableObject.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this object with the specified material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IDrawableObject.CastShadow">
            <summary>
            Gets whether the drawable casts shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IDrawableObject.Material">
            <summary>
            Gets the material of the object.
            A value of null indicates the object does not have any user specific
            material settings, and should be drawn using the default method.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ILightable">
            <summary>
            Defines an interface for objects that receives lights and shadows.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ILightable.MultiPassLightingEnabled">
            <summary>
            Gets whether the lighting system should draw multi-pass lighting
            overlays on to this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ILightable.MaxAffectingLights">
            <summary>
            Gets the max number of affecting lights.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ILightable.MultiPassShadowEnabled">
            <summary>
            Gets whether the lighting system should draw multi-pass shadow
            overlays on to this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ILightable.MaxReceivedShadows">
            <summary>
            Gets the max number of received shadows.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ILightable.LightingData">
            <summary>
            Gets or sets the data used by the lighting and shadowing system.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ISupportInstancing">
            <summary>
            Defines an interface for objects that supports hardware instancing
            </summary>
        </member>
        <member name="M:Nine.Graphics.ISupportInstancing.GetMaterial(System.Int32)">
            <summary>
            Gets the material for the given subset.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ISupportInstancing.PrepareMaterial(System.Int32,Nine.Graphics.Materials.Material)">
            <summary>
            Prepares the material for rendering.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ISupportInstancing.GetVertexBuffer(System.Int32,Microsoft.Xna.Framework.Graphics.VertexBuffer@,System.Int32@,System.Int32@)">
            <summary>
            Gets the vertex buffer for the given subset.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ISupportInstancing.GetIndexBuffer(System.Int32,Microsoft.Xna.Framework.Graphics.IndexBuffer@,System.Int32@,System.Int32@)">
            <summary>
            Gets the index buffer for the given subset.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ISupportInstancing.MeshCount">
            <summary>
            Gets the subset count.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ISupportInstancing.BoundingBox">
            <summary>
            Gets the bounding box of this instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.IDebugDrawable">
            <summary>
            Defines an object that supports debug visual.
            </summary>
        </member>
        <member name="M:Nine.Graphics.IDebugDrawable.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Primitives.DynamicPrimitive)">
            <summary>
            Draws the debug overlay of this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IDebugDrawable.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="T:Nine.Graphics.InstancedModel">
            <summary>
            Defines an instanced model that can be rendered using hardware instancing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.OnTransformChanged">
            <summary>
            Called when transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.InstancedModel"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.ISupportInstancing)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.InstancedModel"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.GetInstanceTransforms">
            <summary>
            Gets the instance transforms.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.SetInstanceTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Sets the instance transforms.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.Update(System.Single)">
            <summary>
            Updates the internal state of the object based on game time.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.PopulateVisibleInstances(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Culls each instance based on camera position.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.Dispose">
            <summary>
            Disposes any resources associated with this instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="P:Nine.Graphics.InstancedModel.GraphicsDevice">
            <summary>
            Gets the underlying GraphicsDevice.
            </summary>
        </member>
        <member name="P:Nine.Graphics.InstancedModel.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.InstancedModel"/> should be visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.InstancedModel.CastShadow">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.InstancedModel"/> should cast shadows.
            </summary>
        </member>
        <member name="P:Nine.Graphics.InstancedModel.ViewDistance">
            <summary>
            Gets or sets the maximum rage of visible instances. Null means all instances are visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.InstancedModel.InsideViewFrustum">
            <summary>
            Gets a value indicating whether this model resides inside the view frustum last frame.
            </summary>
            <remarks>
            This value is only valid before the model is updated.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.InstancedModel.Template">
            <summary>
            Gets the model meshes that made up of this model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.InstancedModel.BoundingBox">
            <summary>
            Gets the axis aligned bounding box in world space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.InstancedModel.BoundingBoxPadding">
            <summary>
            Gets or sets a value that is appended to the computed bounding box to
            compensate scale and rotation loss, since the auto computed bounding box 
            does not care about the scale and rotation of instance transforms.
            </summary>
        </member>
        <member name="E:Nine.Graphics.InstancedModel.Nine#ISpatialQueryable#BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="T:Nine.Graphics.InstancedModelMesh">
            <summary>
            Defines an instanced model that can be rendered using hardware instancing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.InstancedModelMesh.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this object with the specified material.
            </summary>
        </member>
        <member name="T:Nine.Graphics.DirectionalLightCollection">
            <summary>
            Defines a collection of directional lights that are sorted by importance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.DrawingPass">
            <summary>
            A drawing pass represents a single pass in the composition chain.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Drawing.DrawingPass.ClearBackground">
            <summary>
            Gets or sets a value indicating whether the background will be cleared to the background color
            specified in settings. The default value is false.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.DrawingPass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Drawing.Pass"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.DrawingPass.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
            <param name="drawables">
            A list of drawables about to be rendered in this drawing pass.
            </param>
        </member>
        <member name="P:Nine.Graphics.Drawing.DrawingPass.Wireframe">
            <summary>
            Gets or sets a value indicating whether the drawables should be rendered in wireframe.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.DrawingPass.MaterialSortEnabled">
            <summary>
            Gets or sets a value indicating whether the drawable list will be sorted based on material before 
            they are rendered. The default value is false.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.DrawingPass.TransparencySortEnabled">
            <summary>
            Gets or sets a value indicating whether transparent objects will be sorted base on their distance
            to the camera. The default value is false.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.DrawingPass.Material">
            <summary>
            Gets or sets the dominant material used for this drawing pass. If this
            value is null, each drawable will be drawed using its own material, otherwise
            all the drawables will use the material specified in this property.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.DrawingPass.FallbackMaterial">
            <summary>
            Gets or sets the material used when the drawable object do not have any material specified.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Drawing.DrawingPass.MaterialUsage">
            <summary>
            Gets or sets the material usage for this drawing pass. When the material usage
            is not MaterialUsage.Default, the drawing pass will use the associated material
            with this specified material usage to draw each object.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.BloomEffect">
            <summary>
            Represents a bloom post processing effect.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.PostEffectGroup">
            <summary>
            Represents post processing effects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectGroup.#ctor">
            <summary>
            Creates a new instance of ScreenEffect for post processing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectGroup.GetDependentPasses(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets all the pass types that are required by this pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectGroup.GetActivePasses(System.Collections.Generic.IList{Nine.Graphics.Drawing.Pass})">
            <summary>
            Gets all the passes that are going to be rendered.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectGroup.Nine#Graphics#IGraphicsObject#OnAdded(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is added to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectGroup.Nine#Graphics#IGraphicsObject#OnRemoved(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is removed from the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.PostEffectGroup.Draw(Nine.Graphics.DrawingContext,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject})">
            <summary>
            Draws this pass using the specified drawing context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffectGroup.Passes">
            <summary>
            Gets a list of post processing chains contained by this group.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffectGroup.InputTexture">
            <summary>
            Gets or sets the input texture to be processed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffectGroup.InputFormat">
            <summary>
            Gets the preferred surface format for the input texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.PostEffectGroup.Material">
            <summary>
            Gets or sets the material to combine the composite the result
            of each contained pass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.BloomEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.PostEffects.BloomEffect"/> class.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.HighDynamicRangeEffect">
            <summary>
            Represents a high dynamic range (HDR) post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.HighDynamicRangeEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.PostEffects.HighDynamicRangeEffect"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PostEffects.HighDynamicRangeEffect.InputFormat">
            <summary>
            Gets the preferred surface format for the input texture.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PostEffects.DepthOfFieldEffect">
            <summary>
            Represents a depth of field post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PostEffects.DepthOfFieldEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.PostEffects.DepthOfFieldEffect"/> class.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Cross">
            <summary>
            Geometric primitive class for drawing two perpendicular planes.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Primitive`1">
            <summary>
            Base class for simple geometric primitive models. 
            </summary>
        </member>
        <member name="F:Nine.Graphics.Primitives.Primitive`1.Vertices">
            <summary>
            Properties used when building the primitives
            </summary>
        </member>
        <member name="F:Nine.Graphics.Primitives.Primitive`1.PrimitiveCache">
            <summary>
            Primitives sharing the same vb/ib are cached here.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Primitives.Primitive`1"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Invalidate">
            <summary>
            Requests for a rebuild of the primitive vertices and indices.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Rebuild">
            <summary>
            Rebuilds the primitive vertices and indices.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.CanShareBufferWith(Nine.Graphics.Primitives.Primitive{`0})">
            <summary>
            Determines whether this instance can share its vertex and index buffers with the specified primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.OnBuild">
            <summary>
            When implemented by derived classes. Call the AddVertex or AddIndex methods to build the prmitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.AddVertex(Microsoft.Xna.Framework.Vector3,`0)">
            <summary>
            Adds a new vertex to the primitive model. This should only be called
            during the initialization process, before InitializePrimitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.AddIndex(System.Int32)">
            <summary>
            Adds a new index to the primitive model. This should only be called
            during the InitializePrimitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.OnAddedToView(Nine.Graphics.DrawingContext)">
            <summary>
            Draws this object with the specified material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.GetDistanceToCamera(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the distance from the position of the object to the current camera.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this object with the specified material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.TryGetTriangles(Microsoft.Xna.Framework.Vector3[]@,System.UInt16[]@)">
            <summary>
            Gets the triangle vertices of the target geometry.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Dispose">
            <summary>
            Disposes any resources associated with this instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.Visible">
            <summary>
            Gets or sets whether the drawable is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.CastShadow">
            <summary>
            Gets whether the object casts shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.InsideViewFrustum">
            <summary>
            Gets a value indicating whether this primitive resides inside the view frustum last frame.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.Material">
            <summary>
            Gets the material used by this drawable.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.MaterialLevels">
            <summary>
            Gets a collection containing all the materials that are sorted based on level of detail.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.BoundingBox">
            <summary>
            Gets the optional bounding sphere of the primitive.
            </summary>
        </member>
        <member name="E:Nine.Graphics.Primitives.Primitive`1.Nine#ISpatialQueryable#BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.InvertWindingOrder">
            <summary>
            Gets or sets a value indicating whether winding order will be inverted.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.PrimitiveType">
            <summary>
            Gets the primitive type of this primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.CurrentVertex">
            <summary>
            Queries the index of the current vertex. This starts at
            zero, and increments every time AddVertex is called.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cross.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Primitives.Cross"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Cross.Tessellation">
            <summary>
            Gets or sets the tessellation this primitive.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.DynamicPrimitive">
            <summary>
            Enables a group of dynamic primitives to be drawn.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Primitives.DynamicPrimitive.AlwaysMergePrimitives">
            <summary>
            Provides an optimization hint to skip comparison between primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Primitives.DynamicPrimitive"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Primitives.DynamicPrimitive"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.BeginPrimitive(Microsoft.Xna.Framework.Graphics.PrimitiveType,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Begins a new primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.BeginPrimitive(Microsoft.Xna.Framework.Graphics.PrimitiveType,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Begins a new primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.BeginPrimitive(Microsoft.Xna.Framework.Graphics.PrimitiveType,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Single)">
            <summary>
            Begins a new primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.AddVertex(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds the vertex.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.AddVertex(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds the vertex.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.AddVertex(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds the vertex.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.AddVertex(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds the vertex.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.AddVertex(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture@)">
            <summary>
            Adds the vertex.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.AddVertexInternal(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Adds the vertex.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.AddIndex(System.Int32)">
            <summary>
            Adds the index.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.AddIndexInternal(System.Int32)">
            <summary>
            Adds the index.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.EndPrimitive">
            <summary>
            Ends the primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.ExpandLineVertices(System.Boolean)">
            <summary>
            Copy the line vertices to the real vertex data buffer.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.ExpandLineVertex(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture@)">
            <summary>
            Expands a line list to triangle strips.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.CanMerge(Nine.Graphics.Primitives.PrimitiveGroupEntry@,Nine.Graphics.Primitives.PrimitiveGroupEntry@)">
            <summary>
            Determines if two batches can be merged into a single batch.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitive.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.DynamicPrimitive.GraphicsDevice">
            <summary>
            Gets the underlying graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.DynamicPrimitive.Visible">
            <summary>
            Gets or sets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.DynamicPrimitive.DepthBias">
            <summary>
            Gets or sets the depth bias of this dynamic primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.DynamicPrimitive.Nine#Graphics#IDrawableObject#Material">
            <summary>
            Gets the material of the object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.DynamicPrimitive.CastShadow">
            <summary>
            Gets whether the drawable casts shadow.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.PassCollection">
            <summary>
            Represents a collection of <see cref="T:Nine.Graphics.Drawing.Pass"/> that are sorted by dependency.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Helper.GetPrimitiveCount(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32)">
            <summary>
            NumVertsPerPrimitive is a boring helper function that tells how many vertices
            it will take to draw each kind of primitive.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Decal">
            <summary>
            Defines a textured decal that can be projected to the triangle surfaces of the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Decal.OnBoundingBoxChanged">
            <summary>
            Called when the bounding box changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Decal.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Decal"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Decal.GetDistanceToCamera(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the squared distance from the position of the object to the current camera.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Decal.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this object with the specified material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Decal.Draw(Nine.Graphics.DrawingContext)">
            <summary>
            Draws the object using the graphics context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nine.Graphics.Decal.UpdateDecalGeometry">
            <summary>
            Forces an update to the geometry used to render the decal.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Decal.ComputeNormals(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture[],System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Computes the normal for each vertex of the input primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Decal.Dispose">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Decal.Dispose(System.Boolean)">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.IsDynamic">
            <summary>
            Gets or sets a value indicating whether this decal is dynamic.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.Alpha">
            <summary>
            Gets or sets the opaque of this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.Color">
            <summary>
            Gets or sets the color of this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.Size">
            <summary>
            Gets or sets the size of this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.Material">
            <summary>
            Gets the material of the object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.DepthBias">
            <summary>
            Gets or sets a small offset value that is used as the depth bias to eliminate depth fighting.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.LightingEnabled">
            <summary>
            Gets or sets a value indicating whether lighting is enabled for this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.NormalMappingEnabled">
            <summary>
            Gets or sets a value indicating whether normal mapping is enabled for this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.Texture">
            <summary>
            Gets or sets the decal texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.NormalMap">
            <summary>
            Gets or sets an optional normal map for the decal texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.Duration">
            <summary>
            Gets or sets the duration of this decal or null if the decal is persistent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.FadeDuration">
            <summary>
            Gets or sets the duration for this decal to fade out.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.DecalGeometries">
            <summary>
            Gets a list of geometries that projects this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.BoundingBox">
            <summary>
            Gets the axis aligned bounding box in world space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.OrientedBoundingBox">
            <summary>
            Gets the oriented bounding box of this decal in local space.
            </summary>
        </member>
        <member name="E:Nine.Graphics.Decal.Nine#ISpatialQueryable#BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Decal.Nine#ISpatialQueryable#SpatialData">
            <summary>
            Gets or sets the data used for spatial query.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Model">
            <summary>
            Defines a basic model that can be rendered using the renderer with a designated material.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Model.MaxAffectingLights">
            <summary>
            Gets or sets the max affecting lights.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Model.MaxReceivedShadows">
            <summary>
            Gets or sets the max received shadows.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Model.MultiPassShadowEnabled">
            <summary>
            Gets or sets a value indicating whether multi-pass shadowing is enabled.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Model.OnTransformChanged">
            <summary>
            Called when transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Model.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Model"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Model.#ctor(Microsoft.Xna.Framework.Graphics.Model,Nine.Graphics.Materials.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Model"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Model.#ctor(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Model"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Model.UpdateModel">
            <summary>
            Refresh the internal states when a model changes.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Model.UpdateBoneTransforms">
            <summary>
            Updates the bone transform and skin transform of this model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Model.Update(System.Single)">
            <summary>
            Updates the internal state of the object based on game time.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:Nine.Graphics.Model.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets wether the object contains the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nine.Graphics.Model.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
            Gets the nearest intersection point from the specifed picking ray.
            </summary>
            <param name="ray"></param>
            <returns>
            Distance to the start of the ray.
            </returns>
        </member>
        <member name="M:Nine.Graphics.Model.TryGetTriangles(Microsoft.Xna.Framework.Vector3[]@,System.UInt16[]@)">
            <summary>
            Gets the triangle vertices of the target geometry.
            </summary>        
        </member>
        <member name="P:Nine.Graphics.Model.GraphicsDevice">
            <summary>
            Gets the underlying GraphicsDevice.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.Meshes">
            <summary>
            Gets the model meshes that made up of this model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.Source">
            <summary>
            Gets or sets the underlying model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.Material">
            <summary>
            Gets or sets the material that is applied to the whole model. 
            Each model mesh can have its own materials that override this property.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.MaterialLevels">
            <summary>
            Gets a collection containning all the materials used by this model that are sorted based on level of detail.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.Model"/> should be visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.InsideViewFrustum">
            <summary>
            Gets a value indicating whether this model resides inside the view frustum last frame.
            </summary>
            <remarks>
            This value is only valid before the model is updated.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Model.AnimationCullingEnabled">
            <summary>
            Gets a value indicating whether model animations should only be updated when the model
            is visible and inside the view frustum.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.UseModelTextures">
            <summary>
            Gets or sets whether to use the default model diffuse texture, normal map, specular map, etc.
            Other than those specified in the material.
            The default behavior is to use the model default textures.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.CastShadow">
            <summary>
            Gets or sets a value indicating whether this model casts shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.MultiPassLightingEnabled">
            <summary>
            Gets or sets a value indicating whether multi-pass lighting is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.BoundingBox">
            <summary>
            Gets the axis aligned bounding box in world space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.OrientedBoundingBox">
            <summary>
            Gets or sets the oriented bounding box. If animations are enabled,
            you might want to override the computed oriented bounding box.
            </summary>
        </member>
        <member name="E:Nine.Graphics.Model.Nine#ISpatialQueryable#BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.Animations">
            <summary>
            Gets the animations.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.Skeleton">
            <summary>
            Gets the skeleton of this model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.SharedSkeleton">
            <summary>
            Gets or sets the shared skeleton.
            When a valid shared skeleton is set, the model will be rendered using this shared skeleton.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.IsSkinned">
            <summary>
            Gets a value indicating whether this instance is skinned.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Model.Attachments">
            <summary>
            Gets a dictionary of objects that are attached to the specific bone of this model.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SurfaceTopology">
            <summary>
            Defines how the triangles of the surface are organized.
            </summary>
        </member>
        <member name="F:Nine.Graphics.SurfaceTopology.BottomLeftUpperRightCrossed">
            <summary>
            Triangle with a right angle at the (-i,-j) position and another at the (+i,+j) position.
            The topology of adjacent quads are mirrored.
            </summary>
        </member>
        <member name="F:Nine.Graphics.SurfaceTopology.BottomRightUpperLeftCrossed">
            <summary>
            Triangle with a right angle at the (+i,-j) position and another at the high (-i,+j) position.
            /// The topology of adjacent quads are mirrored.
            </summary>
        </member>
        <member name="F:Nine.Graphics.SurfaceTopology.BottomLeftUpperRight">
            <summary>
            Triangle with a right angle at the (-i,-j) position and another at the (+i,+j) position.
            </summary>
        </member>
        <member name="F:Nine.Graphics.SurfaceTopology.BottomRightUpperLeft">
            <summary>
            Triangle with a right angle at the (+i,-j) position and another at the high (-i,+j) position.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Surface">
            <summary>
            A triangle mesh constructed from heightmap to represent game surface. 
            The up axis of the surface is Vector.UnitY.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Surface"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Surface.
            The default vertex format is VertexPositionColorNormalTexture.
            </summary>
            <param name="graphics">Graphics device.</param>
            <param name="step">Size of the smallest square block that made up the surface.</param>
            <param name="segmentCountX">Number of the smallest square block in X axis, or heightmap texture U axis.</param>
            <param name="segmentCountY">Number of the smallest square block in Y axis, or heightmap texture V axis.</param>
            <param name="patchSegmentCount">Number of the smallest square block that made up the surface patch.</param>
        </member>
        <member name="M:Nine.Graphics.Surface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.Heightmap)">
            <summary>
            Creates a new instance of Surface.
            The default vertex format is VertexPositionColorNormalTexture.
            </summary>
            <param name="graphics">Graphics device.</param>
            <param name="heightmap">The heightmap geometry to create from.</param>
        </member>
        <member name="M:Nine.Graphics.Surface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.Heightmap,System.Int32)">
            <summary>
            Creates a new instance of Surface.
            The default vertex format is VertexPositionColorNormalTexture.
            </summary>
            <param name="graphics">Graphics device.</param>
            <param name="heightmap">The heightmap geometry to create from.</param>
            <param name="patchSegmentCount">Number of the smallest square block that made up the surface patch.</param>
        </member>
        <member name="M:Nine.Graphics.Surface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.Heightmap,System.Int32,System.Type)">
            <summary>
            Creates a new instance of Surface.
            The default vertex format is VertexPositionColorNormalTexture.
            </summary>
            <param name="graphics">Graphics device.</param>
            <param name="heightmap">The heightmap geometry to create from.</param>
            <param name="patchSegmentCount">Number of the smallest square block that made up the surface patch.</param>
        </member>
        <member name="M:Nine.Graphics.Surface.ConvertVertexType``1(Nine.Graphics.SurfaceVertexConverter{``0})">
            <summary>
            Converts and fills the surface vertex buffer to another vertex full.
            The default vertex format is VertexPositionColorNormalTexture.
            This method must be called immediately after the surface is created.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.Invalidate">
            <summary>
            TODO: Passes dirty rectangle during heightmap invalidation.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.PopulateVertex(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture@,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture@)">
            <summary>
            Populates a single vertex using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.UpdateLevelOfDetail(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Manually updates the level of detail of each surface patch.
            </summary>
            <param name="eyePosition">The eye position.</param>
            <remarks>
            If you are draw the surface using scene, level of details are automatically updated.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.Surface.GetHeight(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.GetHeight(System.Single,System.Single)">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.GetNormal(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets the normal.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.GetNormal(System.Single,System.Single)">
            <summary>
            Gets the normal.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.TryGetHeightAndNormal(Microsoft.Xna.Framework.Vector3,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the height and normal of the surface at a given location.
            </summary>
            <returns>False if the location is outside the boundary of the surface.</returns>
        </member>
        <member name="M:Nine.Graphics.Surface.TryGetHeightAndNormal(System.Single,System.Single,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the height and normal of the surface at a given location.
            </summary>
            <returns>False if the location is outside the boundary of the surface.</returns>
        </member>
        <member name="M:Nine.Graphics.Surface.TryGetHeight(System.Single,System.Single,System.Single@)">
            <summary>
            Gets the height of the surface at a given location.
            </summary>
            <returns>False if the location is outside the boundary of the surface.</returns>
        </member>
        <member name="M:Nine.Graphics.Surface.IsAbove(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines whether the specified point is above this surface.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.Nine#IPickable#Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Points under the heightmap and are within the boundary are picked.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
            Checks whether a ray intersects the surface mesh.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.Nine#Graphics#IDrawableObject#OnAddedToView(Nine.Graphics.DrawingContext)">
            <summary>
            We only want to hook to the pre draw event to update level of detail.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Surface.Dispose">
            <summary>
            Disposes any resources associated with this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.GraphicsDevice">
            <summary>
            Gets the underlying GraphicsDevice.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Patches">
            <summary>
            Gets the patches that made up this surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.PatchSegmentCount">
            <summary>
            Gets the number of segments of each patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.PatchCountX">
            <summary>
            Gets the count of patches along the x axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.PatchCountZ">
            <summary>
            Gets the count of patches along the z axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.SegmentCountX">
            <summary>
            Gets the number of the smallest square block in X axis, or heightmap texture U axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.SegmentCountZ">
            <summary>
            Gets the number of the smallest square block in Z axis, or heightmap texture V axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Size">
            <summary>
            Gets the size of the surface geometry in 3 axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Step">
            <summary>
            Gets the step of the surface heightmap.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.TextureTransform">
            <summary>
            Gets or sets the transform matrix for vertex uv coordinates.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Topology">
            <summary>
            Gets or sets the topology of the surface triangles.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.VertexType">
            <summary>
            Gets the current vertex type used by this surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Heightmap">
            <summary>
            Gets the underlying heightmap that contains height, normal, tangent data.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.MaxLevelOfDetail">
            <summary>
            Gets the max level of detail of this surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.LevelOfDetailStart">
            <summary>
            Gets or sets the distance at which the surface starts to switch to a lower resolution geometry.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.LevelOfDetailEnd">
            <summary>
            Gets or sets the distance at which the surface has switched to the lowest resolution geometry.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.LevelOfDetailEnabled">
            <summary>
            Gets or sets a value indicating whether level of detail is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.Surface"/> is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Material">
            <summary>
            Gets or sets the material of this drawable surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.MaterialLevels">
            <summary>
            Gets a collection containning all the materials that are sorted based on level of detail.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.CastShadow">
            <summary>
            Gets or sets a value indicating whether this object casts shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Position">
            <summary>
            Gets or sets the local bottom left position of the surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.AbsolutePosition">
            <summary>
            Gets the absolute bottom left position of the surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Center">
            <summary>
            Gets the local center position of the surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.AbsoluteCenter">
            <summary>
            Gets the absolute center position of the surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.BoundingBox">
            <summary>
            Gets the axis aligned bounding box of this surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.BoundingBoxPadding">
            <summary>
            Gets or sets a value that is appended to the computed bounding box
            of each surface patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Surface.Geometry">
            <summary>
            Gets the underlying geometry.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SurfaceVertexConverter`1">
            <summary>
            Fills a vertex data in a drawable surface.
            </summary>
            <typeparam name="T">The target vertex type.</typeparam>
            <param name="x">The x index of the vertex on the target patch, ranged from 0 to PatchSegmentCount inclusive.</param>
            <param name="z">The z index of the vertex on the target patch, ranged from 0 to PatchSegmentCount inclusive.</param>
            <param name="xPatch">The x index of the target patch.</param>
            <param name="zPatch">The z index of the target patch.</param>
            <param name="input">The input vertex contains the default position, normal and texture coordinates for the target vertex.</param>
            <param name="output">The output vertex to be set.</param>
        </member>
        <member name="T:Nine.Components.ScreenshotCapturedEventArgs">
            <summary>
            EventArgs used by ScreenshotCapturer.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturedEventArgs.Screenshot">
            <summary>
            The captured screenshot texture.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturedEventArgs.Filename">
            <summary>
            The filename of the saved screenshot.
            </summary>
        </member>
        <member name="T:Nine.Components.ScreenshotCapturer">
            <summary>
            Screenshot capturer component that captures screenshots.
            </summary>
        </member>
        <member name="F:Nine.Components.ScreenshotCapturer.screenshotNum">
            <summary>
            Internal screenshot number (will increase by one each screenshot)
            </summary>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new instance of ScreenshotCapturer.
            </summary>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.ScreenshotNameBuilder(System.Int32)">
            <summary>
            Screenshot name builder
            </summary>
            <param name="num">Num</param>
            <returns>String</returns>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.GetCurrentScreenshotNum">
            <summary>
            Get current screenshot num
            </summary>
            <returns>Int</returns>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.Capture">
            <summary>
            Takes a new Screenshot of the current backbuffer.
            </summary>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.CaptureAndSave">
            <summary>
            Takes a new Screenshot of the current backbuffer and save it to local storage.
            </summary>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.OnCaptured(Nine.Components.ScreenshotCapturedEventArgs)">
            <summary>
            Raised when a new screenshot is taken.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturer.ScreenshotsDirectory">
            <summary>
            Gets or sets the directory where the screenshot files will be stored.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturer.CaptureKey">
            <summary>
            Gets or sets the key used to capture a screenshot.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturer.CaptureButton">
            <summary>
            Gets or sets the gamepad button used to capture a screenshot.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturer.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="E:Nine.Components.ScreenshotCapturer.Captured">
            <summary>
            Occurs when a new screenshot is captured.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.CustomMaterial">
            <summary>
            Represents a type of material that are build from custom shader files.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.CustomMaterial"/> class for serialization.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.CustomMaterial.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.CustomMaterial"/> class.
            </summary>
            <param name="source">The effect.</param>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterial.Source">
            <summary>
            Gets or sets the source effect of this custom material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterial.ShaderCode">
            <summary>
            Gets or sets the shader code for this custom material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterial.Parameters">
            <summary>
            Gets the parameters unique to this custom material instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.CustomMaterial.SamplerState">
            <summary>
            Gets or sets the sampler state for this custom material.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialGroup">
            <summary>
            Defines a material that is grouped by material fragments.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.MaterialGroup"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.Find``1">
            <summary>
            Queries the material for the specified feature T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.FindAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Queries the material for all the components that implements interface T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.GetDependentPasses(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets the textures that are required by this material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.SetTexture(Nine.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets the texture based on the texture usage.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.OnBeginApply(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Applies all the shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.OnEndApply(Nine.Graphics.DrawingContext)">
            <summary>
            Restores any shader parameters changes after drawing the promitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.OnResolveMaterial(Nine.Graphics.Materials.MaterialUsage,Nine.Graphics.Materials.Material)">
            <summary>
            Gets the material with the specified usage that is attached to this material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.OnShaderChanged">
            <summary>
            Called when the shader has changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialGroup.Clone">
            <summary>
            Creates a deep copy of this material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialGroup.MaterialParts">
            <summary>
            Gets a collection holding all the material parts.
            </summary>
        </member>
        <member name="T:Nine.Graphics.GraphicsExtensions">
            <summary>
            Contains extension methods related to graphics.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsExtensions.EnablePerfHudProfiling(Microsoft.Xna.Framework.GraphicsDeviceManager)">
            <summary>
            Enables profiling using nVidia PerfHud.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsExtensions.CreateHiddenGraphicsDevice(Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
            <summary>
            Creates a new hidden graphics device.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsExtensions.CreateHiddenGraphicsDevice(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
            <summary>
            Creates a new hidden graphics device.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ViewportExtensions">
            <summary>
            Contains extension method for Viewport.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.CreatePickRay(Microsoft.Xna.Framework.Graphics.Viewport,System.Int32,System.Int32,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a picking ray from screen position.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.CreatePickFrustum(Microsoft.Xna.Framework.Graphics.Viewport,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a picking frustum from screen rectangle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.CreatePickFrustum(Microsoft.Xna.Framework.Graphics.Viewport,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a picking frustum from screen rectangle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.TryPick(Nine.IPickable,Microsoft.Xna.Framework.Graphics.Viewport,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the picked position in world space from current mouse coordinates.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.TryPick(Nine.IPickable,Microsoft.Xna.Framework.Graphics.Viewport,System.Int32,System.Int32,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the picked position in world space from screen coordinates.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Fog">
            <summary>
            Defines an area of fog.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Fog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Fog"/> class.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SurfaceGeometry">
            <summary>
            Represents a terrain level of detail technique using GeoMipMapping.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Nine.Graphics.SurfaceTopology)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.SurfaceGeometry"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="patchSegmentCount">The patch segment count.</param>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.GetInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Nine.Graphics.SurfaceTopology)">
            <summary>
            Gets a static instance of SurfaceGeometry.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.EnableLevelOfDetail">
            <summary>
            Enables the level of detail. By default it is not enabled.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.GetLevel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the level of detail.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.GetLevel(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Gets the level of detail.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.GetIndicesForLevel(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16[],System.Int32)">
            <summary>
            Gets the indices for the specified detail level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.GetTriangles(System.Int32,System.Int32)">
            <summary>
            Gets the triangle indices at the specified grid.
            </summary>
        </member>
        <member name="F:Nine.Graphics.SurfaceGeometry.Points">
            <summary>
            Gets the indices of points that takes the following 8 triangles to makes up a square block.
             ____ ____
            | \ 1|2 / |
            |0_\_|_/_3|
            |4 / | \ 7|
            |_/_5|6_\_|
            
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.LogBaseTowOf(System.Int32)">
            <summary>
            The input must be a power of two.
            Bitwise hack: http://graphics.stanford.edu/~seander/bithacks.html
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfaceGeometry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfaceGeometry.IndexBuffer">
            <summary>
            Gets the index buffer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfaceGeometry.MaxLevelOfDetail">
            <summary>
            Gets the max level of detail.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfaceGeometry.LevelOfDetailEnabled">
            <summary>
            Gets a value indicating whether level of detail is enabled.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureUsage">
            <summary>
            Defines commonly used texture usage.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.None">
            <summary>
            Default texture usage.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Diffuse">
            <summary>
            Specifies the target texture is used as diffuse texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Ambient">
            <summary>
            Specifies the target texture is used as ambient texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Emissive">
            <summary>
            Specifies the target texture is used as emissive texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Specular">
            <summary>
            Specifies the target texture is used as specular texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Detail">
            <summary>
            Specifies the target texture is used as detail texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Overlay">
            <summary>
            Specifies the target texture is used as overlay texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Dual">
            <summary>
            Specifies the target texture is used as dual texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Reflection">
            <summary>
            Specifies the target texture is used as reflection texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Refraction">
            <summary>
            Specifies the target texture is used as refraction texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Lightmap">
            <summary>
            Specifies the target texture is used as lightmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.DarkMap">
            <summary>
            Specifies the target texture is used as lightmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Luminance">
            <summary>
            Specifies the target texture is used as luminance texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Bloom">
            <summary>
            Specifies the target texture is used as bloom texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Blur">
            <summary>
            Specifies the target texture is used as blur texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.ShadowMap">
            <summary>
            Specifies the target texture is used as shadowmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.NormalMap">
            <summary>
            Specifies the target texture is used as normalmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Heightmap">
            <summary>
            Specifies the target texture is used as heightmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.BumpMap">
            <summary>
            Specifies the target texture is used as bump texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.EnvironmentMap">
            <summary>
            Specifies the target texture is used as environment texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.DepthBuffer">
            <summary>
            Specifies the target texture is used as depth buffer texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.NormalBuffer">
            <summary>
            Specifies the target texture is used as normal buffer texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.LightBuffer">
            <summary>
            Specifies the target texture is used as light buffer texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Decal">
            <summary>
            Specifies the target texture is used as decal texture.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart">
            <summary>
            Defines a material part that provides emissive color and emissive texture
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart.OnBind">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart.BeginApplyLocalParameters(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Applies all the local shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart.Clone">
            <summary>
            Copies data from an existing object to this object.
            Returns null if this material part do not have any local parameters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart.EmissiveMapEnabled">
            <summary>
            Gets or sets a value indicating whether emissive map is enabled.
            The default value is not enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart.EmissiveColorEnabled">
            <summary>
            Gets or sets a value indicating whether emissive color is enabled.
            The default value is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart.EmissiveMap">
            <summary>
            Gets or sets the emissive map.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart.EmissiveColor">
            <summary>
            Gets or sets the emissive color.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart">
            <summary>
            Defines a material part that provides specular color and specular texture
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.OnBind">
            <summary>
            Called when this material part is bound to a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.BeginApplyLocalParameters(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Applies all the local shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.EndApplyLocalParameters(Nine.Graphics.DrawingContext)">
            <summary>
            Restores any local shader parameters changes after drawing the promitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.Clone">
            <summary>
            Copies data from an existing object to this object.
            Returns null if this material part do not have any local parameters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.SpecularMapEnabled">
            <summary>
            Gets or sets a value indicating whether specular map is enabled.
            The default value is not enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.SpecularColorEnabled">
            <summary>
            Gets or sets a value indicating whether specular color is enabled.
            The default value is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.SpecularMap">
            <summary>
            Gets or sets the specular map.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.SpecularColor">
            <summary>
            Gets or sets the specular color.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart.SpecularPower">
            <summary>
            Gets or sets the specular power.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelMesh">
            <summary>
            Defines a part of a model that contains only one material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelMesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ModelMesh"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelMesh.Attach(Nine.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart)">
            <summary>
            Attaches this <see cref="T:Nine.Graphics.ModelMesh"/> to a parent <see cref="F:Nine.Graphics.ModelMesh.model"/>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelMesh.OnAddedToView(Nine.Graphics.DrawingContext)">
            <summary>
            Perform any updates when this object has entered the main view frustum
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelMesh.GetDistanceToCamera(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the distance from the position of the object to the current camera.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelMesh.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this object with the specified material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.Model">
            <summary>
            Gets the containing model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.Visible">
            <summary>
            Gets or sets the visibility of this model part.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.Transform">
            <summary>
            Gets the world transform of this model mesh.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.Material">
            <summary>
            Gets or sets the material of this model mesh.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.MaterialLevels">
            <summary>
            Gets a collection containning all the materials used by this model mesh that are sorted based on level of detail.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.Nine#Graphics#IDrawableObject#Material">
            <summary>
            Use the material from parent model if no materials are specified.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.UseModelTextures">
            <summary>
            Gets or sets whether to use the default model diffuse texture, normal map, specular map, etc.
            Other than those specified in the material.
            The default behavior is to use the model default textures.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.Texture">
            <summary>
            Gets the diffuse texture of this model mesh.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMesh.Textures">
            <summary>
            Gets the textures used by this model mesh based on texture usage.
            </summary>
        </member>
        <member name="T:Nine.Graphics.DirectionalLight">
            <summary>
            Defines a directional light source.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Light">
            <summary>
            Defines a base class for a light used by the render system.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Light.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Light"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Light.OnAdded(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is added to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Light.OnRemoved(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is removed from the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Light.Nine#Graphics#IGraphicsObject#OnAdded(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is added to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Light.Nine#Graphics#IGraphicsObject#OnRemoved(Nine.Graphics.DrawingContext)">
            <summary>
            Called when this scene object is removed from the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Light.FindAll(Nine.Scene,System.Collections.Generic.IList{Nine.Graphics.IDrawableObject},System.Collections.Generic.ICollection{Nine.Graphics.IDrawableObject})">
            <summary>
            Finds all the objects affected by this light.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Light.UpdateShadowFrustum(Nine.Graphics.DrawingContext,Nine.ISpatialQuery{Nine.Graphics.IDrawableObject})">
            <summary>
            Computes the shadow frustum of this light based on the current
            view frustum and objects in the current view frustum;
            </summary>
        </member>
        <member name="M:Nine.Graphics.Light.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Primitives.DynamicPrimitive)">
            <summary>
            Draws the light frustum.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Light.GraphicsDevice">
            <summary>
            Gets the underlying GraphicsDevice.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Light.Enabled">
            <summary>
            Gets whether the light is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Light.Order">
            <summary>
            Gets the order of this light when it's been process by the renderer.
            Light might be discarded when the max affecting lights are reached.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Light.MultiPassMaterial">
            <summary>
            Gets the material usage to draw multi-pass lighting effect, or return 
            MaterialUsage.Default to indicate that this light does not support
            multi-pass lighting effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Light.CastShadow">
            <summary>
            Gets or sets whether the light should cast a shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Light.ShadowMap">
            <summary>
            Gets or sets the shadow technique used by this light.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Light.ShadowFrustum">
            <summary>
            Gets the shadow frustum of this light.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DirectionalLight.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.DirectionalLight"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DirectionalLight.UpdateShadowFrustum(Nine.Graphics.DrawingContext,Nine.ISpatialQuery{Nine.Graphics.IDrawableObject})">
            <summary>
            Computes the shadow frustum of this light based on the current
            view frustum and objects in the current scene;
            </summary>
        </member>
        <member name="M:Nine.Graphics.DirectionalLight.Nine#Graphics#Drawing#IDeferredLight#PrepareLightGeometry(Nine.Graphics.DrawingContext)">
            <summary>
            Gets the light geometry for deferred lighting.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DirectionalLight.ShadowDistance">
            <summary>
            Gets or sets the distance between the camera and the shadowed region.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DirectionalLight.Direction">
            <summary>
            Gets or sets the direction of this light.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DirectionalLight.SpecularColor">
            <summary>
            Gets or sets the specular color of this light.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DirectionalLight.DiffuseColor">
            <summary>
            Gets or sets the diffuse color of this light.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PointLight.Nine#Graphics#Drawing#IDeferredLight#PrepareLightGeometry(Nine.Graphics.DrawingContext)">
            <summary>
            Gets the light geometry for deferred lighting.
            </summary>
        </member>
        <member name="E:Nine.Graphics.PointLight.Nine#ISpatialQueryable#BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SpotLight.Nine#Graphics#Drawing#IDeferredLight#PrepareLightGeometry(Nine.Graphics.DrawingContext)">
            <summary>
            Gets the light geometry for deferred lighting.
            </summary>
        </member>
        <member name="E:Nine.Graphics.SpotLight.Nine#ISpatialQueryable#BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="T:Nine.Graphics.DrawingContext">
            <summary>
            A drawing context contains commonly used global parameters for rendering.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.DrawingContext"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.DrawingContext"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.ISpatialQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.DrawingContext"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.SetVertexBuffer(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
            <summary>
            SetVertexBuffer is not doing a good job filtering out duplicated vertex buffer due to
            multiple vertex buffer binding. Doing it manually here.
            </summary>
            <remarks>
            You should always use this SetVertexBuffer instead of GraphicsDevice.SetVertexBuffer.
            If you try to bind to multiple vertex buffers, use GraphicsDevice.SetVertexBuffer and
            call context.SetVertexBuffer(null, 0);
            </remarks>
        </member>
        <member name="F:Nine.Graphics.DrawingContext.PreviousMaterial">
            <summary>
            Provides an optimization hint to opt-out parameters that are not 
            changed since last drawing operation.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.CreateSpatialQuery``1(System.Predicate{``0})">
            <summary>
            Create a spatial query of the specified type from this scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.UpdateBounds">
            <summary>
            Updates the axis aligned bounding box that exactly contains the bounds of all objects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.Draw(System.Single)">
            <summary>
            Draws the specified scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.Draw(System.Single,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draws the specified scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.AddDrawablesToView(Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Finds and adds all the drawables in the view frustum.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.UpdateDefaultSamplerStates">
            <summary>
            Resets all texture sampler states to the default states specified in settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.UpdatePassGraph">
            <summary>
            Builds a dependency pass group from materials.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.CreatePass(System.Type)">
            <summary>
            Creates a pass from the pass type.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.UpdateActivePasses">
            <summary>
            Builds an array of active passes from the current pass graph.
            </summary>
        </member>
        <member name="M:Nine.Graphics.DrawingContext.DrawDiagnostics">
            <summary>
            Draws the debug overlay of the target scene.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.GraphicsDevice">
            <summary>
            Gets the underlying graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.Camera">
            <summary>
            Gets or sets the active camera of the current drawing frustum.
            </summary>
            <remarks>
            This camera will be initialized to first camera found in the scene.
            If no cameras are found, then a default free camera is used.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.ElapsedTime">
            <summary>
            Gets the elapsed time since last update.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.TotalTime">
            <summary>
            Gets the total seconds since the beginning of the drawing context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.BoundingBox">
            <summary>
            Gets the bounding box of the current drawing context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.CurrentFrame">
            <summary>
            Gets the number of elapsed frames since the beginning of the draw context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.Textures">
            <summary>
            Gets a collection of global textures.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.MainPass">
            <summary>
            Gets the main pass that is used to render the scene.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.Passes">
            <summary>
            Gets the passes that is used to render the scene.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.TextureFilter">
            <summary>
            Gets or sets the texture filter quality for this drawing pass.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.MaxAnisotropy">
            <summary>
            Gets or sets the maximum anisotropy. The default value is 4.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.SamplerState">
            <summary>
            Gets the default sampler state.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.View">
            <summary>
            Gets the view matrix for this drawing operation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.Projection">
            <summary>
            Gets the projection matrix for this drawing operation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.CameraPosition">
            <summary>
            Gets the current camera position.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.ViewFrustum">
            <summary>
            Gets the view frustum for this drawing operation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.Matrices">
            <summary>
            Gets commonly used matrices.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.AmbientLightColor">
            <summary>
            Gets the global ambient light color of this <see cref="T:Nine.Graphics.DrawingContext"/>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.DirectionalLights">
            <summary>
            Gets a global sorted collection of directional lights of this <see cref="T:Nine.Graphics.DrawingContext"/>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.DirectionalLight">
            <summary>
            Gets the default or main directional light of this <see cref="T:Nine.Graphics.DrawingContext"/>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.FogColor">
            <summary>
            Gets the global fog color.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.FogEnd">
            <summary>
            Gets or sets the fog end.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.FogStart">
            <summary>
            Gets or sets the fog start.
            </summary>
        </member>
        <member name="P:Nine.Graphics.DrawingContext.HalfPixel">
            <summary>
            Gets the half pixel size of the current viewport.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SkyBox">
            <summary>
            Defines a skybox.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SkyBox.Dispose">
            <summary>
            Disposes any resources associated with this instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SkyBox.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Nine.Graphics.SkyBox.Visible">
            <summary>
            Gets or sets whether the drawable is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SkyBox.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SkyBox.Nine#Graphics#IDrawableObject#Material">
            <summary>
            Gets the material used by this drawable.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SkyBox.Color">
            <summary>
            Gets or sets the color of the skybox.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SkyBox.Texture">
            <summary>
            Gets or sets the skybox texture.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Cone">
            <summary>
            Geometric primitive class for drawing cones.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cone.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new cylinder primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cone.GetCircleVector(System.Int32,System.Int32)">
            <summary>
            Helper method computes a point on a circle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Cone.Tessellation">
            <summary>
            Gets or sets the tessellation of this primitive.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Bezier">
            <summary>
            Base class for primitives that are made out of cubic bezier patches
            (a type of curved surface). This is used by the TeapotPrimitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Primitives.Bezier"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.CreatePatchIndices(System.Int32,System.Boolean)">
            <summary>
            Creates indices for a patch that is tessellated at the specified level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.CreatePatchVertices(Microsoft.Xna.Framework.Vector3[],System.Int32,System.Boolean)">
            <summary>
            Creates vertices for a patch that is tessellated at the specified level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.BezierInterpolate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic bezier interpolation between four scalar control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.BezierInterpolate(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Performs a cubic bezier interpolation between four Vector3 control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.BezierTangent(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes the tangent of a cubic bezier curve at the specified time,
            when given four scalar control points.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.BezierTangent(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Computes the tangent of a cubic bezier curve at the specified time,
            when given four Vector3 control points. This is used for calculating
            normals (by crossing the horizontal and vertical tangent vectors).
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Box">
            <summary>
            Geometric primitive class for drawing cubes.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Box.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new cube primitive, using default settings.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Plane">
            <summary>
            Geometric primitive class for drawing planes.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Plane.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Primitives.Plane"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Plane.TessellationX">
            <summary>
            Gets or sets the tessellation on x axis of this primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Plane.TessellationZ">
            <summary>
            Gets or sets the tessellation on z axis of this primitive.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Dome">
            <summary>
            Geometric primitive class for drawing spheres.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Dome.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new sphere primitive, using default settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Dome.Tessellation">
            <summary>
            Gets or sets the tessellation of this primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Dome.Angle">
            <summary>
            Gets or sets the angle of this primitive.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Torus">
            <summary>
            Geometric primitive class for drawing toruses.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Torus.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new torus primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Torus.OnBuild">
            <summary>
            Called when building this primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Torus.Tessellation">
            <summary>
            Gets or sets the tessellation of this primitive.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Teapot">
            <summary>
            Geometric primitive class for drawing teapots.
            
            This teapot model was created by Martin Newell and Jim Blinn in 1975.
            It consists of ten cubic bezier patches, a type of curved surface which
            can be tessellated to create triangles at various levels of detail. The
            use of curved surfaces allows a smoothly curved, visually interesting,
            and instantly recognizable shape to be specified by a tiny amount of
            data, which made the teapot a popular test data set for computer graphics
            researchers. It has been used in so many papers and demos that many
            graphics programmers have come to think of it as a standard geometric
            primitive, right up there with cubes and spheres!
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nine.Graphics.Primitives.Teapot.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)" -->
        <member name="M:Nine.Graphics.Primitives.Teapot.TessellatePatch(Nine.Graphics.Primitives.Teapot.TeapotPatch,System.Int32,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Tessellates the specified bezier patch.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Primitives.Teapot.TeapotPatches">
            <summary>
            Static data array defines the bezier patches that make up the teapot.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Primitives.Teapot.TeapotControlPoints">
            <summary>
            Static array defines the control point positions that make up the teapot.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Teapot.Tessellation">
            <summary>
            Gets or sets the tessellation of this primitive.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Teapot.TeapotPatch">
            <summary>
            The teapot model consists of 10 bezier patches. Each patch has 16 control
            points, plus a flag indicating whether it should be mirrored in the Z axis
            as well as in X (all of the teapot is symmetrical from left to right, but
            only some parts are symmetrical from front to back). The control points
            are stored as integer indices into the TeapotControlPoints array.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Cylinder">
            <summary>
            Geometric primitive class for drawing cylinders.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cylinder.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new cylinder primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cylinder.GetCircleVector(System.Int32,System.Int32)">
            <summary>
            Helper method computes a point on a circle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Cylinder.Tessellation">
            <summary>
            Gets or sets the tessellation of this primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Sphere.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new sphere primitive, using default settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Sphere.Tessellation">
            <summary>
            Gets or sets the tessellation of this primitive.
            </summary>
        </member>
        <member name="T:Nine.Graphics.FullScreenQuad">
            <summary>
            Represents a full screen quad.
            </summary>
        </member>
        <member name="F:Nine.Graphics.FullScreenQuad.vertexBuffer">
            <summary>
            The vertex buffer and index buffers are shared between FullScreenQuads.
            </summary>
        </member>
        <member name="F:Nine.Graphics.FullScreenQuad.vertexPassThrough2">
            <summary>
            Always use this pass through material as the vertex shader when drawing full screen quads.
            </summary>
        </member>
        <member name="M:Nine.Graphics.FullScreenQuad.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.FullScreenQuad"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.FullScreenQuad.GetBuffers(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexBuffer@,Microsoft.Xna.Framework.Graphics.IndexBuffer@)">
            <summary>
            Gets the vertex and index buffer for drawing sprites.
            </summary>
        </member>
        <member name="P:Nine.Graphics.FullScreenQuad.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.FullScreenQuad.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.FullScreenQuad.Material">
            <summary>
            Gets or sets the material of the object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.FullScreenQuad.Texture">
            <summary>
            Gets or sets the texture to display in this quad.
            </summary>
        </member>
        <member name="T:Nine.Graphics.VertexPositionNormal">
            <summary>
            Vertex format for shader vertex format used all over the place.
            It contains: Position, Normal vector
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormal.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormal.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormal.VertexElements">
            <summary>
            Vertex elements for Mesh.Clone
            </summary>
        </member>
        <member name="P:Nine.Graphics.VertexPositionNormal.SizeInBytes">
            <summary>
            Stride size.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Drawing.RenderTargetPool">
            <summary>
            Represents a pool of render targets.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.RenderTargetPool.GetRenderTarget(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            Creates a render target from the pool without locking it.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.RenderTargetPool.Lock(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Locks the target render target to prevent it from being created from the pool.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Drawing.RenderTargetPool.Unlock(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Unlocks the target render target.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.IEffectShadowMap">
            <summary>
            Defines an interface for effects that supports shadow mapping.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.IEffectShadowMap.LightViewProjection">
            <summary>
            Gets or sets the view projection matrix of the light that casts the shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.IEffectShadowMap.ShadowMap">
            <summary>
            Gets or sets the shadow map texture that holds the depth values in x(r) channel.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.IEffectLights`1">
            <summary>
            Gets or sets lighting parameters for the current effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.IEffectLights`1.Lights">
            <summary>
            Gets a read only collection of lights exposed by this effect.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ColorController">
            <summary>
            Defines a basic controller that changes the color of the particle
            effect based on time.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleController`1">
            <summary>
            Defines the base class for all particle controllers.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleController">
            <summary>
            Defines the base class for all particle controllers.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.IParticleController">
            <summary>
            Defines an controller that controls the appearance and behavior of each
            individual particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.IParticleController.Reset(Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Resets a newly emitted particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.IParticleController.Update(System.Single,Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Updates an existing particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleController.Update(System.Single,Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Updates an existing particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleController.Reset(Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Resets a new emitted particle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleController.ParticleEffect">
            <summary>
            Gets the containing partcie effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleController.Enabled">
            <summary>
            Gets or sets whether this emitter is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleController.Random">
            <summary>
            Gets the random number generator used by particle emitters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ColorController.EndColor">
            <summary>
            Range of values controlling the particle end color and alpha. 
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.FadeController">
            <summary>
            Defines a basic controller that fade the particle in and out.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SizeController">
            <summary>
            Defines a basic controller that changes the size of the particle
            effect based on time.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.SizeController.EndSize">
            <summary>
            Range of values controlling the particle end size.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.RotationController">
            <summary>
            Defines a basic controller that changes the rotation of the particle
            effect based on time.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.RotationController.EndRotation">
            <summary>
            Range of values controlling the particle end rotation.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SpeedController">
            <summary>
            Defines a basic controller that controls the acceleration of the particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.SpeedController.EndSpeed">
            <summary>
            Range of values representing the particle end speed in proportion to its start speed.
            A value of 1 means no change, a value of 0 means complete stop.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ForceController">
            <summary>
            Defines a basic controller that applies a constant linear force on the particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ForceController.Force">
            <summary>
            Gets or sets the force amount.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.TangentForceController">
            <summary>
            Defines a basic controller that applies a constant tangent force on the particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.TangentForceController.Force">
            <summary>
            Gets or sets the force amount.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.TangentForceController.Up">
            <summary>
            Gets or sets the up axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.TangentForceController.Center">
            <summary>
            Gets or sets the center position.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.AbsorbController">
            <summary>
            Defines a basic controller that absorbs the particles to a given point.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.AbsorbController.Position">
            <summary>
            Gets or sets the absorb position.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.AbsorbController.Force">
            <summary>
            Gets or sets the absorb force.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.Particle">
            <summary>
            Represents each individual particle in a particle system effect.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Position">
            <summary>
            Gets or sets the position of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Velocity">
            <summary>
            Gets or sets the moving speed of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Rotation">
            <summary>
            Gets or sets the rotation of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Alpha">
            <summary>
            Gets or sets the transparency of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Color">
            <summary>
            Gets or sets the color of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Size">
            <summary>
            Gets or sets the size of this particle.
            </summary>        
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.ElapsedTime">
            <summary>
            Gets or sets the elapsed time (in seconds) since this particle was created.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Duration">
            <summary>
            Gets or sets the duration (in seconds) of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Age">
            <summary>
            Gets or sets age of this particle in the range 0 to 1.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Frame">
            <summary>
            Gets or sets the animation frame of this particle.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleControllerCollection">
            <summary>
            Defines a collection of particle controllers.
            </summary>
        </member>
        <member name="T:Nine.Graphics.VertexPositionNormalTangentBinormalTexture">
            <summary>
            Tangent vertex format for shader vertex format used all over the place.
            It contains: Position, Normal vector, texture coords, tangent vector.
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.TextureCoordinate">
            <summary>
            Texture coordinates
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.Tangent">
            <summary>
            Tangent
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.Binormal">
            <summary>
            Binormal
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create tangent vertex
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create tangent vertex
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.VertexElements">
            <summary>
            Vertex elements for Mesh.Clone
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.GenerateVertexElements">
            <summary>
            Generate vertex declaration
            </summary>
        </member>
        <member name="P:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.SizeInBytes">
            <summary>
            Stride size, in XNA called SizeInBytes. I'm just conforming with that.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.DynamicPrimitiveExtensions">
            <summary>
            Contains extension method for <c>PrimitiveBatch</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.DynamicPrimitiveExtensions.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Matrix.CreateConstraintBillboard has a sudden change effect that is not
            desirable, so rolling out our own version.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.TextureAlphaUsage">
            <summary>
            Determines how the alpha channel of the diffuse texture will be used.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Materials.MaterialParts.TextureAlphaUsage.Opacity">
            <summary>
            The alpha channel will determine the opacity of the object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Nine.Graphics.Materials.MaterialParts.TextureAlphaUsage.Overlay" -->
        <!-- Badly formed XML comment ignored for member "F:Nine.Graphics.Materials.MaterialParts.TextureAlphaUsage.Specular" -->
        <member name="F:Nine.Graphics.Materials.MaterialParts.TextureAlphaUsage.None">
            <summary>
            The alpha channel of the texture is ignored.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart">
            <summary>
            Defines a material part that provides diffuse color and diffuse texture
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.BeginApplyLocalParameters(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Applies all the local shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.EndApplyLocalParameters(Nine.Graphics.DrawingContext)">
            <summary>
            Restores any local shader parameters changes after drawing the primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.Clone">
            <summary>
            Copies data from an existing object to this object.
            Returns null if this material part do not have any local parameters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.VertexColorEnabled">
            <summary>
            Gets or sets a value indicating whether vertex color is used as diffuse color.
            The default value is not enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.DiffuseColorEnabled">
            <summary>
            Gets or sets a value indicating whether diffuse color is enabled.
            The default value is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.TextureEnabled">
            <summary>
            Gets or sets a value indicating whether diffuse texture is enabled.
            The default value is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.Texture">
            <summary>
            Gets or sets the diffuse texture.
            This value will override Material.Texture property when it's not null.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.DiffuseColor">
            <summary>
            Gets or sets the diffuse color.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.OverlayColor">
            <summary>
            Gets or sets the overlay color when texture alpha is used as overlay.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart.TextureAlphaUsage">
            <summary>
            Gets or sets the texture alpha usage.
            Make sure the texture is processed with no premultiplied alpha when usages
            are not set to TextureAlphaUsage.Opacity.
            </summary>        
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.NormalMapMaterialPart">
            <summary>
            Defines a material part that provides normals from normal maps
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.NormalMapMaterialPart.NormalMap">
            <summary>
            Gets or sets the normal map.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.ShadowMapMaterialPart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Materials.MaterialParts.ShadowMapMaterialPart"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.ShadowMapMaterialPart.OnBind">
            <summary>
            Called when this material part is bound to a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.ShadowMapMaterialPart.BeginApplyLocalParameters(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.MaterialGroup)">
            <summary>
            Applies all the local shader parameters before drawing any primitives.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.FogMaterialPart.SetFogVector(Microsoft.Xna.Framework.Matrix@,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Sets a vector which can be dotted with the object space vertex position to compute fog amount.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart">
            <summary>
            Defines a material part that allows vertex skinning based on bone hierarchy.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart.OnBind">
            <summary>
            Called when this material part is bound to a material group.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart.Clone">
            <summary>
            Copies data from an existing object to this object.
            Returns null if this material part do not have any local parameters.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Sets an array of skinning bone transform matrices.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart.GetBoneTransforms(System.Int32)">
            <summary>
            Gets a copy of the current skinning bone transform matrices.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart.MaxBones">
            <summary>
            Gets or sets the max number of bones.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart.WeightsPerVertex">
            <summary>
            Gets or sets the weights per vertex.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Camera2D">
            <summary>
            Defines a 2D orthographic camera that uses a right handed 
            coordinate system with X axis pointing right, Y axis pointing
            up and Z axis pointing outside the screen. The origin
            of the coordinate system is the center of the screen.
            </summary>
        </member>
        <member name="T:Nine.Graphics.VertexPositionColorNormalTexture">
            <summary>
            Vertex format for shader vertex format used all over the place.
            It contains: Position, Normal vector, color and texture coords
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.TextureCoordinate">
            <summary>
            Texture coordinates
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.VertexElements">
            <summary>
            Vertex elements for Mesh.Clone
            </summary>
        </member>
        <member name="P:Nine.Graphics.VertexPositionColorNormalTexture.SizeInBytes">
            <summary>
            Stride size.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelCollision">
            <summary>
            Defines a octree base model collision detection.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelCollision.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets wether the object contains the given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelCollision.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
            Gets the nearest intersection point from the specifed picking ray.
            </summary>
            <returns>Distance to the start of the ray.</returns>
        </member>
        <member name="P:Nine.Graphics.ModelCollision.CollisionTree">
            <summary>
            Gets the collision tree.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ColorMatrix">
            <summary>
            Helper class to create color matrices.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ColorMatrix.YiqTransform">
            <summary>
            Transforms RGB colours in YIQ space.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ColorMatrix.RgbTransform">
            <summary>
            Transforms YIQ colours in RGB space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureTransform">
            <summary>
            Helper class to create texture transformation matrices.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.CreateTranslation(System.Single,System.Single)">
            <summary>
            Creates a texture transform matrix from translation.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.CreateScale(System.Single,System.Single)">
            <summary>
            Creates a texture transform matrix from scale.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.CreateRotation(System.Single)">
            <summary>
            Creates a texture transform matrix from rotation.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.CreateFromSourceRectange(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Creates a texture transform matrix from a source rectangle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.Transform(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms a texture coordinate based on the texture transform.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.ToArray(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Returns a 3x3 array representation of the texture transform.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureAtlasFrame">
            <summary>
            Defines a texture and a source rectangle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureAtlasFrame.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.TextureAtlasFrame"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextureAtlasFrame.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextureAtlasFrame.SourceRectangle">
            <summary>
            Gets or sets the source rectangle.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureAtlas">
            <summary>
            Defines a list of textures and source rectangles.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureAtlas.GetIndex(System.String)">
            <summary>
            Looks up the numeric index of the specified sprite. 
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextureAtlas.Frames">
            <summary>
            Gets a read-only collection of frames.
            </summary>
        </member>
        <member name="P:Nine.Graphics.TextureAtlas.Count">
            <summary>
            Gets the total number of frames.
            </summary>
        </member>
        <member name="T:Nine.Graphics.EffectExtensions">
            <summary>
            Contains extension methods for Effects.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.IParticleEmitter">
            <summary>
            Defines an emitter that emit new particles for particle effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.IParticleEmitter.Update(Nine.Graphics.ParticleEffects.ParticleEffect,System.Single)">
            <summary>
            Updates the emitter, emits any new particles during the update.
            </summary>
            <returns>
            Returns true when this emitter has stopped emitting new particles.
            </returns>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.IParticleEmitter.BoundingBox">
            <summary>
            Gets the world space bounding box that potentially contains
            all the particles emitted by this particle emitter.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleEmitter">
            <summary>
            Defines the base class for all particle emitters.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ParticleEffects.ParticleEmitter"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.Randomize(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates the random vector.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.Randomize(System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates the random vector.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.Update(Nine.Graphics.ParticleEffects.ParticleEffect,System.Single)">
            <summary>
            Updates the emitter, emits any new particles during the update.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.GetBoundingBox(Microsoft.Xna.Framework.BoundingBox@)">
            <summary>
            Gets the bounding box that defines the region of this particle emitter without been offset by Position.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.Emit(System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Emits a new particle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.ParticleEffects.ParticleEmitter"/> is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.EmitCount">
            <summary>
            Gets or sets the number of particles emitted when triggered.
            When this value is greater then zero, Lifetime and Emission is ignored.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Emission">
            <summary>
            Gets or sets the number of particles emitted per second.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Delay">
            <summary>
            Gets or sets the time before the first particle is emitted.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Lifetime">
            <summary>
            Gets or sets the total lifetime of this particle effect when triggered.
            The default value is forever.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Duration">
            <summary>
            Gets or sets the duration of each particle in seconds.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Color">
            <summary>
            Gets or sets the range of values controlling the particle start color and alpha. 
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Size">
            <summary>
            Gets or sets the range of values controlling the particle start size.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Rotation">
            <summary>
            Gets or sets the range of values controlling the particle start rotation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Speed">
            <summary>
            Gets or sets the range of values controlling the particle start speed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Random">
            <summary>
            Gets the random number generator used by particle emitters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.BoundingBox">
            <summary>
            Gets the bounding box that potentially contains all the particles emitted by
            this particle emitter.
            </summary>
        </member>
        <member name="T:Nine.Graphics.FreeCamera">
            <summary>
            A first person free camera.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelViewerCamera">
            <summary>
            Defines a camera used to view models.
            </summary>
        </member>
        <member name="T:Nine.Graphics.BirdEyeCamera">
            <summary>
            Defines a camera that emulates the bird eye view.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Geometry">
            <summary>
            Geometric representation of a model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Geometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Geometry"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Geometry.#ctor(Nine.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Geometry"/> class.
            </summary>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Nine.Graphics.Geometry.#ctor(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.ICollection{System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Geometry"/> class.
            </summary>
            <param name="positions">The positions.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:Nine.Graphics.Geometry.TryGetTriangles(Microsoft.Xna.Framework.Vector3[]@,System.UInt16[]@)">
            <summary>
            Gets the triangle vertices of the target geometry.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Geometry.BoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Geometry.Positions">
            <summary>
            Gets a read only list of vertex positions.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Geometry.Indices">
            <summary>
            Gets a read-only list of geometry indices.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Heightmap">
            <summary>
            The geometric representation of heightmap. 
            The up axis of the terrain is Vector.UnitY.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Heightmap.
            </summary>
            <param name="step">Size of the smallest square block that made up the terrain.</param>
            <param name="segmentCountX">Number of the smallest square block in X axis, or heightmap texture U axis.</param>
            <param name="segmentCountZ">Number of the smallest square block in Z axis, or heightmap texture V axis.</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.#ctor(System.Single[],System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Heightmap.
            </summary>
            <param name="heightmap">Heights of each points. The dimension of the array should be (segmentCountX + 1) * (segmentCountZ + 1).</param>
            <param name="step">Size of the smallest square block that made up the terrain.</param>
            <param name="segmentCountX">Number of the smallest square block in X axis, or heightmap texture U axis.</param>
            <param name="segmentCountZ">Number of the smallest square block in Z axis, or heightmap texture V axis.</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetPosition(System.Int32,System.Int32)">
            <summary>
            Gets the position of the terrain on given point.
            </summary>
            <param name="x">Point on x axis.</param>
            <param name="z">Point on z axis.</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetHeight(System.Int32,System.Int32)">
            <summary>
            Gets the height of the terrain on given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetNormal(System.Int32,System.Int32)">
            <summary>
            Gets the normal of the terrain on given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetTangent(System.Int32,System.Int32)">
            <summary>
            Gets the tangent of the terrain on given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index of the terrain on given point. 
            The return value can be used to index Heights, Normals and Tangents.
            </summary>
            <param name="x">Point on x axis.</param>
            <param name="z">Point on z axis.</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.LoadHeightmap(System.Single[])">
            <summary>
            Loads this terrain geometry with the specified heightmap data.
            </summary>
            <param name="heightmap">Heights of each points. The dimension of the array should be (segmentCountX + 1) * (segmentCountY + 1).</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.CalculateNormalsAndTangents(System.Int32,System.Int32,System.Single[],System.Single,System.Single,Microsoft.Xna.Framework.Vector3[]@,Microsoft.Xna.Framework.Vector3[]@)">
            <summary>
            Calculate normals from height data
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetHeight(System.Single,System.Single)">
            <summary>
            Gets the height of the terrain at a given location.
            </summary>
            <returns>Null if the location is outside the boundary of the terrain.</returns>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetNormal(System.Single,System.Single)">
            <summary>
            Gets the normal of the terrain at a given location.
            </summary>
            <returns>Null if the location is outside the boundary of the terrain.</returns>
        </member>
        <member name="M:Nine.Graphics.Heightmap.TryGetHeightAndNormal(System.Single,System.Single,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the height and normal of the terrain at a given location.
            </summary>
            <returns>False if the location is outside the boundary of the terrain.</returns>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetWidth(Nine.Graphics.Surface)">
            <summary>
            Gets the width of the heightmap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.SetWidth(Nine.Graphics.Surface,System.Int32)">
            <summary>
            Sets the width of the heightmap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetHeight(Nine.Graphics.Surface)">
            <summary>
            Gets the height of the heightmap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.SetHeight(Nine.Graphics.Surface,System.Int32)">
            <summary>
            Sets the height of the heightmap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetStep(Nine.Graphics.Surface)">
            <summary>
            Gets the step of the heightmap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.SetStep(Nine.Graphics.Surface,System.Single)">
            <summary>
            Sets the step of the heightmap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.SetSize(Nine.Graphics.Surface,Microsoft.Xna.Framework.Vector3)">
            <summary>
            This method is called at runtime to adjust surface heightmap
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Size">
            <summary>
            Gets the size of the terrain geometry in 3 axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Step">
            <summary>
            Gets the size of the smallest square block that made up the terrain.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Heights">
            <summary>
            Gets the heights of all terrain points.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Normals">
            <summary>
            Gets the normals of all terrain points.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Tangents">
            <summary>
            Gets the tangents of all terrain points.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Width">
            <summary>
            Gets the number of the smallest square block in X axis, or heightmap texture U axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Height">
            <summary>
            Gets the number of the smallest square block in Y axis, or heightmap texture V axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Tag">
            <summary>
            Gets or sets any user data.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.BoundingBox">
            <summary>
            Gets the axis aligned bounding box of this terrain.
            </summary>
        </member>
        <member name="E:Nine.Graphics.Heightmap.Invalidate">
            <summary>
            Occured when the heightmap changed.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelTag">
            <summary>
            Tag used by models.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelTag.Skeleton">
            <summary>
            Gets the skinning data attached to the model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelTag.Collision">
            <summary>
            Gets the collision data attached to the model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelTag.Animations">
            <summary>
            Gets the animation data attached to the model.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelMeshPartTag">
            <summary>
            Tag used by ModelMeshPart.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMeshPartTag.BoundingBox">
            <summary>
            Gets the bounding box of this ModelMeshPart.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMeshPartTag.Textures">
            <summary>
            Gets the additional textures (E.g. normalmap) attached to the ModelMeshPart.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelExtensions">
            <summary>
            Contains extension methods to models.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.IsSkinned(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Gets whether the specified model has any skinning info attached to it.
            Works with models that are processed by Nine.Pipeline.Processors.ExtendedModelProcessor.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAnimations(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Gets the animation data associated with the specified model.
            Works with models that are processed by Nine.Pipeline.Processors.ExtendedModelProcessor.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAnimation(Microsoft.Xna.Framework.Graphics.Model,System.String)">
            <summary>
            Gets the animation data associated with the specified model.
            Works with models that are processed by Nine.Pipeline.Processors.ExtendedModelProcessor.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAnimation(Microsoft.Xna.Framework.Graphics.Model,System.Int32)">
            <summary>
            Gets the animation data associated with the specified model.
            Works with models that are processed by Nine.Pipeline.Processors.ExtendedModelProcessor.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAbsoluteBoneTransform(Microsoft.Xna.Framework.Graphics.Model,System.Int32)">
            <summary>
            Gets the aboslute transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAbsoluteBoneTransform(Microsoft.Xna.Framework.Graphics.Model,System.String)">
            <summary>
            Gets the aboslute transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.Contains(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets wether the model contains the given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.Intersects(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Ray)">
            <summary>
            Gets the nearest intersection point from the specifed picking ray.
            </summary>
            <returns>Distance to the start of the ray.</returns>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetTextures(Microsoft.Xna.Framework.Graphics.ModelMeshPart)">
            <summary>
            Gets all the texture names attached to the model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetTexture(Microsoft.Xna.Framework.Graphics.ModelMeshPart,Nine.Graphics.TextureUsage)">
            <summary>
            Gets the texture attached to the model with the specified name.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetEffects(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Gets all the effects in the model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ConvertEffectTo(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Converts all the effects of the Model to a new effect.
            Materials (Diffuse, Emissive, etc) and textures parameters are copied to the new effect.
            </summary>
            <remarks>
            This function requires the effect to be either build in effect or effects 
            that implements IEffectMaterial or IEffectTexture.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ConvertEffectTo(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Converts all the effects of the ModelMesh to a new effect.
            Materials (Diffuse, Emissive, etc) and textures parameters are copied to the new effect.
            </summary>
            <remarks>
            This function requires the effect to be either build in effect or effects 
            that implements IEffectMaterial or IEffectTexture.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ConvertEffectTo(Microsoft.Xna.Framework.Graphics.ModelMeshPart,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Converts the current effect of the ModelMeshPart to a new effect.
            Materials (Diffuse, Emissive, etc) and textures parameters are copied to the new effect.
            </summary>
            <remarks>
            This function requires the effect to be either build in effect or effects 
            that implements IEffectMaterial or IEffectTexture.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ConvertEffectTo(Microsoft.Xna.Framework.Graphics.ModelMeshPart,Microsoft.Xna.Framework.Graphics.Effect,System.Boolean,System.Boolean)">
            <summary>
            Converts the current effect of the ModelMeshPart to a new effect.
            Materials (Diffuse, Emissive, etc) and textures parameters are copied to the new effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ComputeBoundingBox(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Computes the bounding box for the specified xna model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ComputeBoundingBoxFromVertices(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.BoundingBox@)">
            <summary>
            Computes the bounding box for the specified xna model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ComputeBoundingBox(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart)">
            <summary>
            Computes the bounding box for the specified xna model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.CopyPositionsTo(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Vector3[],System.Int32)">
            <summary>
            Copies the positions of the model to the target array.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.CopyIndicesTo(Microsoft.Xna.Framework.Graphics.Model,System.UInt16[],System.Int32)">
            <summary>
            Copies the indices of the model to the target array.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.CopyPositionsTo(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart,Microsoft.Xna.Framework.Vector3[],System.Int32)">
            <summary>
            Copies the positions of the model mesh part to the target array.
            The positions are not transformed by the transform of the model mesh.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.CopyIndicesTo(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart,System.UInt16[],System.Int32)">
            <summary>
            Copies the indices of the model mesh part to the target array.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ComputeBoundingBoxFromVertices(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart,System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.BoundingBox@)">
            <summary>
            Computes the bounding box for the specified xna model.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelSkeleton">
            <summary>
            Defines a bone hierarchy used by models.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelSkeleton.#ctor(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Initializes a new instance of <c>ModelSkeleton</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelSkeleton.BoneTransforms">
            <summary>
            Gets a fixed sized array of transformation matrices for each bone
            according to its parent bone.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelSkeleton.ParentBones">
            <summary>
            Gets the hierarchical relationship between bones.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelSkeletonData">
            <summary>
            Combines all the data needed to render and animate a skinned object.
            This is typically stored in the Tag property of the Model being animated.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelSkeletonData.#ctor(System.Collections.Generic.List{Microsoft.Xna.Framework.Matrix},System.Int32)">
            <summary>
            Constructs a new skinning data object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelSkeletonData.#ctor">
            <summary>
            Private constructor for use by the XNB deserializer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelSkeletonData.InverseAbsoluteBindPose">
            <summary>
            Vertex to bonespace transforms for each bone in the skeleton.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelSkeletonData.SkeletonRoot">
            <summary>
            Index of the skeleton root on the parent mesh bone collection.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.PointEmitter">
            <summary>
            Defines a point emitter that emit particles from a point in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.BoxEmitter">
            <summary>
            Defines a point emitter that emit particles from a box in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SphereEmitter">
            <summary>
            Defines a point emitter that emit particles from a sphere in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.CylinderEmitter">
            <summary>
            Defines a point emitter that emit particles from a cylinder in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.LineEmitter">
            <summary>
            Defines a point emitter that emit particles from a list of lines in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleType">
            <summary>
            Defines how each particle should be rendered.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.ParticleType.Billboard">
            <summary>
            The particle will be rendered as 3D billboard that always faces the camera.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.ParticleType.ConstrainedBillboard">
            <summary>
            The particle will be rendered as 3D constrained billboard that is constrained
            by the forward moving axis while still faces the camera.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.ParticleType.ConstrainedBillboardUp">
            <summary>
            The particle will be rendered as 3D constrained billboard that is constrained
            by the specified axis while still faces the camera.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleAction">
            <summary>
            Action for particles.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleEffect">
            <summary>
            Defines a special visual effect made up of particles.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ParticleEffects.ParticleEffect"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.EstimateMaxParticleCount">
            <summary>
            Estimates the max particle count base on emitter properties.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.ForEach(Nine.Graphics.ParticleEffects.ParticleAction)">
            <summary>
            Traverses all active particles.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Emit(Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Emits a new particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Update(System.Single)">
            <summary>
            Updates the particle system.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Update">
            <summary>
            Updates using the elapsed time saved from last frame.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.OnAddedToView(Nine.Graphics.DrawingContext)">
            <summary>
            Called every frame when this object is added to the main view frustum.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.GetDistanceToCamera(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the squared distance from the position of the object to the current camera.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this object with the specified material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.ParticleType">
            <summary>
            Gets or sets the type of each particle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.InsideViewFrustum">
            <summary>
            Gets a value indicating whether this primitive resides inside the view frustum last frame.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Enabled">
            <summary>
            Gets or sets whether this particle effect is enabled.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Nine.Graphics.ParticleEffects.ParticleEffect.Stretch" -->
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Texture">
            <summary>
            Gets or sets the texture used by this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.SourceRectangle">
            <summary>
            Gets or sets the source rectangle in the texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.IsAdditive">
            <summary>
            Gets or sets whether each particles with be blended using additive blending.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.SoftParticleEnabled">
            <summary>
            Gets or sets a value indicating whether particles should softly blends with other opaque scene objects.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.SoftParticleFade">
            <summary>
            Gets or sets a fade factor whether when soft particle is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.IsAsync">
            <summary>
            Gets or sets a value indicating whether this particle effect will be updated asynchronously.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.AbsolutePosition">
            <summary>
            Gets the absolute position of this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.BoundingBox">
            <summary>
            Gets the axis aligned bounding box in world space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.BoundingBoxPadding">
            <summary>
            Gets or sets a value that is appended to the computed bounding box.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Nine#ISpatialQueryable#SpatialData">
            <summary>
            Gets or sets the data used for spatial query.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Nine#Graphics#IDrawableObject#Material">
            <summary>
            Gets the material of the object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Nine#Graphics#IDrawableObject#CastShadow">
            <summary>
            Gets whether the drawable casts shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Emitter">
            <summary>
            Gets or sets the emitter prototype of this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Controllers">
            <summary>
            Gets a collection of controllers that defines the visual of this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.ParticleCount">
            <summary>
            Gets the approximate particle count.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ParticleEffects.ParticleEffect.ParticleEmitted">
            <summary>
            Occurs when a particle is about to die.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ParticleEffects.ParticleEffect.ParticleRetired">
            <summary>
            Occurs when a particle is about to die.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ParticleEffects.ParticleEffect.Nine#ISpatialQueryable#BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.MaxFramesBehind">
            <summary>
            Gets or sets max number of frames the update frame can run behind the draw frame.
            </summary>
        </member>
        <member name="T:Nine.Graphics.VertexPositionNormalDualTexture">
            <summary>
            Vertex format for shader vertex format used all over the place.
            It contains: Position, Normal vector, 2 texture coords
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.TextureCoordinate">
            <summary>
            Texture coordinates
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.TextureCoordinate1">
            <summary>
            Tangent
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalDualTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create tangent vertex
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.VertexElements">
            <summary>
            Vertex elements for Mesh.Clone
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalDualTexture.GenerateVertexElements">
            <summary>
            Generate vertex declaration
            </summary>
        </member>
        <member name="P:Nine.Graphics.VertexPositionNormalDualTexture.SizeInBytes">
            <summary>
            Stride size, in XNA called SizeInBytes. I'm just conforming with that.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SurfacePatchCollection">
            <summary>
            A collection of all the pathes in a Surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatchCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the patch for the specified index.
            </summary>
            <returns>
            Returns null if the input is outside the bounds.
            </returns>
        </member>
        <member name="T:Nine.Graphics.SurfacePatch">
            <summary>
            A square block made up of surface patch parts. The whole surface is rendered patch by patch.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfacePatch.TryGetTriangles(Microsoft.Xna.Framework.Vector3[]@,System.UInt16[]@)">
            <summary>
            Gets the triangle vertices of the target geometry.
            </summary>        
        </member>
        <member name="M:Nine.Graphics.SurfacePatch.#ctor(Nine.Graphics.Surface,System.Int32,System.Int32)">
            <summary>
            Constructor is for internal use only.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfacePatch.UpdateLevelOfDetail">
            <summary>
            Updates the level of detail.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfacePatch.OnAddedToView(Nine.Graphics.DrawingContext)">
            <summary>
            Perform any updates before this object is drawed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfacePatch.GetDistanceToCamera(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the squared distance from the position of the object to the current camera.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfacePatch.Draw(Nine.Graphics.DrawingContext,Nine.Graphics.Materials.Material)">
            <summary>
            Draws this object with the specified material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfacePatch.Dispose">
            <summary>
            Disposes any resources associated with this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.SegmentCount">
            <summary>
            Gets the number of segments of this patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.X">
            <summary>
            Gets the x index of the patch on the parent surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.Z">
            <summary>
            Gets the z index of the patch on the parent surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.DetailLevel">
            <summary>
            Gets the level of detail of this surface patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.VertexBuffer">
            <summary>
            Gets vertex buffer of this patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.IndexBuffer">
            <summary>
            Gets index buffer of this patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.StartIndex">
            <summary>
            Gets the start index of primitives that made up the patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.PrimitiveCount">
            <summary>
            Gets the number of primitives that made up the patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.VertexCount">
            <summary>
            Gets the number of vertices that made up the patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.GraphicsDevice">
            <summary>
            Gets the underlying GraphicsDevice.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.Transform">
            <summary>
            Gets the transform matrix used to draw the patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.Surface">
            <summary>
            Gets the parent surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.Tag">
            <summary>
            Gets or sets any user data.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.BoundingBox">
            <summary>
            Gets the axis aligned bounding box of this surface patch.
            </summary>
        </member>
        <member name="E:Nine.Graphics.SurfacePatch.Nine#ISpatialQueryable#BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.Position">
            <summary>
            Gets the bottom left position of the surface patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.SurfacePatch.Center">
            <summary>
            Gets or sets the center position of the surface patch.
            </summary>
        </member>
        <member name="T:Nine.Graphics.SurfacePatch`1">
            <summary>
            To support ConvertVertexType, we need to store T using generic subclass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.SurfacePatch`1.Invalidate">
            <summary>
            Invalidates this instance.
            </summary>
        </member>
    </members>
</doc>
